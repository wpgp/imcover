// Generated by rstantools.  Do not edit by hand.

/*
    imcover is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    imcover is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with imcover.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_multi_lik_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_multi_lik");
    reader.add_event(157, 155, "end", "model_multi_lik");
    return reader;
}
#include <stan_meta_header.hpp>
class model_multi_lik
  : public stan::model::model_base_crtp<model_multi_lik> {
private:
        int N;
        int N_a;
        int N_o;
        int N_s;
        int N_i;
        int N_j;
        int N_t;
        std::vector<int> i;
        std::vector<int> j;
        std::vector<int> t;
        int start_o;
        int start_s;
        std::vector<double> y;
public:
    model_multi_lik(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_multi_lik(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_multi_lik_namespace::model_multi_lik";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 0);
            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "N_a", "int", context__.to_vec());
            N_a = int(0);
            vals_i__ = context__.vals_i("N_a");
            pos__ = 0;
            N_a = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_a", N_a, 0);
            current_statement_begin__ = 7;
            context__.validate_dims("data initialization", "N_o", "int", context__.to_vec());
            N_o = int(0);
            vals_i__ = context__.vals_i("N_o");
            pos__ = 0;
            N_o = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_o", N_o, 0);
            current_statement_begin__ = 8;
            context__.validate_dims("data initialization", "N_s", "int", context__.to_vec());
            N_s = int(0);
            vals_i__ = context__.vals_i("N_s");
            pos__ = 0;
            N_s = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_s", N_s, 0);
            current_statement_begin__ = 10;
            context__.validate_dims("data initialization", "N_i", "int", context__.to_vec());
            N_i = int(0);
            vals_i__ = context__.vals_i("N_i");
            pos__ = 0;
            N_i = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_i", N_i, 0);
            current_statement_begin__ = 11;
            context__.validate_dims("data initialization", "N_j", "int", context__.to_vec());
            N_j = int(0);
            vals_i__ = context__.vals_i("N_j");
            pos__ = 0;
            N_j = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_j", N_j, 0);
            current_statement_begin__ = 12;
            context__.validate_dims("data initialization", "N_t", "int", context__.to_vec());
            N_t = int(0);
            vals_i__ = context__.vals_i("N_t");
            pos__ = 0;
            N_t = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_t", N_t, 0);
            current_statement_begin__ = 14;
            validate_non_negative_index("i", "N", N);
            context__.validate_dims("data initialization", "i", "int", context__.to_vec(N));
            i = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("i");
            pos__ = 0;
            size_t i_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < i_k_0_max__; ++k_0__) {
                i[k_0__] = vals_i__[pos__++];
            }
            size_t i_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < i_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "i[i_0__]", i[i_0__], 1);
                check_less_or_equal(function__, "i[i_0__]", i[i_0__], N_i);
            }
            current_statement_begin__ = 15;
            validate_non_negative_index("j", "N", N);
            context__.validate_dims("data initialization", "j", "int", context__.to_vec(N));
            j = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("j");
            pos__ = 0;
            size_t j_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < j_k_0_max__; ++k_0__) {
                j[k_0__] = vals_i__[pos__++];
            }
            size_t j_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < j_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "j[i_0__]", j[i_0__], 1);
                check_less_or_equal(function__, "j[i_0__]", j[i_0__], N_j);
            }
            current_statement_begin__ = 16;
            validate_non_negative_index("t", "N", N);
            context__.validate_dims("data initialization", "t", "int", context__.to_vec(N));
            t = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("t");
            pos__ = 0;
            size_t t_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < t_k_0_max__; ++k_0__) {
                t[k_0__] = vals_i__[pos__++];
            }
            size_t t_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < t_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "t[i_0__]", t[i_0__], 1);
                check_less_or_equal(function__, "t[i_0__]", t[i_0__], N_t);
            }
            current_statement_begin__ = 18;
            context__.validate_dims("data initialization", "start_o", "int", context__.to_vec());
            start_o = int(0);
            vals_i__ = context__.vals_i("start_o");
            pos__ = 0;
            start_o = vals_i__[pos__++];
            check_greater_or_equal(function__, "start_o", start_o, 1);
            current_statement_begin__ = 19;
            context__.validate_dims("data initialization", "start_s", "int", context__.to_vec());
            start_s = int(0);
            vals_i__ = context__.vals_i("start_s");
            pos__ = 0;
            start_s = vals_i__[pos__++];
            check_greater_or_equal(function__, "start_s", start_s, 1);
            current_statement_begin__ = 21;
            validate_non_negative_index("y", "N", N);
            context__.validate_dims("data initialization", "y", "double", context__.to_vec(N));
            y = std::vector<double>(N, double(0));
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
                y[k_0__] = vals_r__[pos__++];
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 26;
            validate_non_negative_index("lambda_a", "N_j", N_j);
            num_params_r__ += (1 * N_j);
            current_statement_begin__ = 27;
            validate_non_negative_index("lambda_o", "N_j", N_j);
            num_params_r__ += (1 * N_j);
            current_statement_begin__ = 28;
            validate_non_negative_index("lambda_s", "N_j", N_j);
            num_params_r__ += (1 * N_j);
            current_statement_begin__ = 30;
            validate_non_negative_index("beta_i", "N_i", N_i);
            num_params_r__ += (1 * N_i);
            current_statement_begin__ = 31;
            validate_non_negative_index("alpha_j", "N_j", N_j);
            num_params_r__ += (1 * N_j);
            current_statement_begin__ = 32;
            validate_non_negative_index("phi_t", "N_t", N_t);
            num_params_r__ += (1 * N_t);
            current_statement_begin__ = 33;
            validate_non_negative_index("gamma_it", "N_i", N_i);
            validate_non_negative_index("gamma_it", "N_t", N_t);
            num_params_r__ += ((1 * N_i) * N_t);
            current_statement_begin__ = 34;
            validate_non_negative_index("gamma_jt", "N_j", N_j);
            validate_non_negative_index("gamma_jt", "N_t", N_t);
            num_params_r__ += ((1 * N_j) * N_t);
            current_statement_begin__ = 35;
            validate_non_negative_index("gamma_ij", "N_i", N_i);
            validate_non_negative_index("gamma_ij", "N_j", N_j);
            num_params_r__ += ((1 * N_i) * N_j);
            current_statement_begin__ = 36;
            validate_non_negative_index("delta_ijt", "N_j", N_j);
            validate_non_negative_index("delta_ijt", "N_t", N_t);
            validate_non_negative_index("delta_ijt", "N_i", N_i);
            num_params_r__ += ((N_j * N_t) * N_i);
            current_statement_begin__ = 38;
            num_params_r__ += 1;
            current_statement_begin__ = 39;
            num_params_r__ += 1;
            current_statement_begin__ = 40;
            num_params_r__ += 1;
            current_statement_begin__ = 41;
            num_params_r__ += 1;
            current_statement_begin__ = 44;
            num_params_r__ += 1;
            current_statement_begin__ = 45;
            num_params_r__ += 1;
            current_statement_begin__ = 47;
            num_params_r__ += 1;
            current_statement_begin__ = 50;
            num_params_r__ += 1;
            current_statement_begin__ = 51;
            num_params_r__ += 1;
            current_statement_begin__ = 52;
            num_params_r__ += 1;
            current_statement_begin__ = 53;
            num_params_r__ += 1;
            current_statement_begin__ = 54;
            num_params_r__ += 1;
            current_statement_begin__ = 55;
            num_params_r__ += 1;
            current_statement_begin__ = 56;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_multi_lik() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 26;
        if (!(context__.contains_r("lambda_a")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lambda_a missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lambda_a");
        pos__ = 0U;
        validate_non_negative_index("lambda_a", "N_j", N_j);
        context__.validate_dims("parameter initialization", "lambda_a", "double", context__.to_vec(N_j));
        std::vector<double> lambda_a(N_j, double(0));
        size_t lambda_a_k_0_max__ = N_j;
        for (size_t k_0__ = 0; k_0__ < lambda_a_k_0_max__; ++k_0__) {
            lambda_a[k_0__] = vals_r__[pos__++];
        }
        size_t lambda_a_i_0_max__ = N_j;
        for (size_t i_0__ = 0; i_0__ < lambda_a_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(lambda_a[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lambda_a: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 27;
        if (!(context__.contains_r("lambda_o")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lambda_o missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lambda_o");
        pos__ = 0U;
        validate_non_negative_index("lambda_o", "N_j", N_j);
        context__.validate_dims("parameter initialization", "lambda_o", "double", context__.to_vec(N_j));
        std::vector<double> lambda_o(N_j, double(0));
        size_t lambda_o_k_0_max__ = N_j;
        for (size_t k_0__ = 0; k_0__ < lambda_o_k_0_max__; ++k_0__) {
            lambda_o[k_0__] = vals_r__[pos__++];
        }
        size_t lambda_o_i_0_max__ = N_j;
        for (size_t i_0__ = 0; i_0__ < lambda_o_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(lambda_o[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lambda_o: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 28;
        if (!(context__.contains_r("lambda_s")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lambda_s missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lambda_s");
        pos__ = 0U;
        validate_non_negative_index("lambda_s", "N_j", N_j);
        context__.validate_dims("parameter initialization", "lambda_s", "double", context__.to_vec(N_j));
        std::vector<double> lambda_s(N_j, double(0));
        size_t lambda_s_k_0_max__ = N_j;
        for (size_t k_0__ = 0; k_0__ < lambda_s_k_0_max__; ++k_0__) {
            lambda_s[k_0__] = vals_r__[pos__++];
        }
        size_t lambda_s_i_0_max__ = N_j;
        for (size_t i_0__ = 0; i_0__ < lambda_s_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(lambda_s[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lambda_s: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 30;
        if (!(context__.contains_r("beta_i")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_i missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_i");
        pos__ = 0U;
        validate_non_negative_index("beta_i", "N_i", N_i);
        context__.validate_dims("parameter initialization", "beta_i", "double", context__.to_vec(N_i));
        std::vector<double> beta_i(N_i, double(0));
        size_t beta_i_k_0_max__ = N_i;
        for (size_t k_0__ = 0; k_0__ < beta_i_k_0_max__; ++k_0__) {
            beta_i[k_0__] = vals_r__[pos__++];
        }
        size_t beta_i_i_0_max__ = N_i;
        for (size_t i_0__ = 0; i_0__ < beta_i_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(beta_i[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_i: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 31;
        if (!(context__.contains_r("alpha_j")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha_j missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha_j");
        pos__ = 0U;
        validate_non_negative_index("alpha_j", "N_j", N_j);
        context__.validate_dims("parameter initialization", "alpha_j", "double", context__.to_vec(N_j));
        std::vector<double> alpha_j(N_j, double(0));
        size_t alpha_j_k_0_max__ = N_j;
        for (size_t k_0__ = 0; k_0__ < alpha_j_k_0_max__; ++k_0__) {
            alpha_j[k_0__] = vals_r__[pos__++];
        }
        size_t alpha_j_i_0_max__ = N_j;
        for (size_t i_0__ = 0; i_0__ < alpha_j_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(alpha_j[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha_j: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 32;
        if (!(context__.contains_r("phi_t")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable phi_t missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("phi_t");
        pos__ = 0U;
        validate_non_negative_index("phi_t", "N_t", N_t);
        context__.validate_dims("parameter initialization", "phi_t", "double", context__.to_vec(N_t));
        std::vector<double> phi_t(N_t, double(0));
        size_t phi_t_k_0_max__ = N_t;
        for (size_t k_0__ = 0; k_0__ < phi_t_k_0_max__; ++k_0__) {
            phi_t[k_0__] = vals_r__[pos__++];
        }
        size_t phi_t_i_0_max__ = N_t;
        for (size_t i_0__ = 0; i_0__ < phi_t_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(phi_t[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable phi_t: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 33;
        if (!(context__.contains_r("gamma_it")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable gamma_it missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("gamma_it");
        pos__ = 0U;
        validate_non_negative_index("gamma_it", "N_i", N_i);
        validate_non_negative_index("gamma_it", "N_t", N_t);
        context__.validate_dims("parameter initialization", "gamma_it", "double", context__.to_vec(N_i,N_t));
        std::vector<std::vector<double> > gamma_it(N_i, std::vector<double>(N_t, double(0)));
        size_t gamma_it_k_0_max__ = N_i;
        size_t gamma_it_k_1_max__ = N_t;
        for (size_t k_1__ = 0; k_1__ < gamma_it_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < gamma_it_k_0_max__; ++k_0__) {
                gamma_it[k_0__][k_1__] = vals_r__[pos__++];
            }
        }
        size_t gamma_it_i_0_max__ = N_i;
        size_t gamma_it_i_1_max__ = N_t;
        for (size_t i_0__ = 0; i_0__ < gamma_it_i_0_max__; ++i_0__) {
            for (size_t i_1__ = 0; i_1__ < gamma_it_i_1_max__; ++i_1__) {
                try {
                    writer__.scalar_unconstrain(gamma_it[i_0__][i_1__]);
                } catch (const std::exception& e) {
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable gamma_it: ") + e.what()), current_statement_begin__, prog_reader__());
                }
            }
        }
        current_statement_begin__ = 34;
        if (!(context__.contains_r("gamma_jt")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable gamma_jt missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("gamma_jt");
        pos__ = 0U;
        validate_non_negative_index("gamma_jt", "N_j", N_j);
        validate_non_negative_index("gamma_jt", "N_t", N_t);
        context__.validate_dims("parameter initialization", "gamma_jt", "double", context__.to_vec(N_j,N_t));
        std::vector<std::vector<double> > gamma_jt(N_j, std::vector<double>(N_t, double(0)));
        size_t gamma_jt_k_0_max__ = N_j;
        size_t gamma_jt_k_1_max__ = N_t;
        for (size_t k_1__ = 0; k_1__ < gamma_jt_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < gamma_jt_k_0_max__; ++k_0__) {
                gamma_jt[k_0__][k_1__] = vals_r__[pos__++];
            }
        }
        size_t gamma_jt_i_0_max__ = N_j;
        size_t gamma_jt_i_1_max__ = N_t;
        for (size_t i_0__ = 0; i_0__ < gamma_jt_i_0_max__; ++i_0__) {
            for (size_t i_1__ = 0; i_1__ < gamma_jt_i_1_max__; ++i_1__) {
                try {
                    writer__.scalar_unconstrain(gamma_jt[i_0__][i_1__]);
                } catch (const std::exception& e) {
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable gamma_jt: ") + e.what()), current_statement_begin__, prog_reader__());
                }
            }
        }
        current_statement_begin__ = 35;
        if (!(context__.contains_r("gamma_ij")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable gamma_ij missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("gamma_ij");
        pos__ = 0U;
        validate_non_negative_index("gamma_ij", "N_i", N_i);
        validate_non_negative_index("gamma_ij", "N_j", N_j);
        context__.validate_dims("parameter initialization", "gamma_ij", "double", context__.to_vec(N_i,N_j));
        std::vector<std::vector<double> > gamma_ij(N_i, std::vector<double>(N_j, double(0)));
        size_t gamma_ij_k_0_max__ = N_i;
        size_t gamma_ij_k_1_max__ = N_j;
        for (size_t k_1__ = 0; k_1__ < gamma_ij_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < gamma_ij_k_0_max__; ++k_0__) {
                gamma_ij[k_0__][k_1__] = vals_r__[pos__++];
            }
        }
        size_t gamma_ij_i_0_max__ = N_i;
        size_t gamma_ij_i_1_max__ = N_j;
        for (size_t i_0__ = 0; i_0__ < gamma_ij_i_0_max__; ++i_0__) {
            for (size_t i_1__ = 0; i_1__ < gamma_ij_i_1_max__; ++i_1__) {
                try {
                    writer__.scalar_unconstrain(gamma_ij[i_0__][i_1__]);
                } catch (const std::exception& e) {
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable gamma_ij: ") + e.what()), current_statement_begin__, prog_reader__());
                }
            }
        }
        current_statement_begin__ = 36;
        if (!(context__.contains_r("delta_ijt")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable delta_ijt missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("delta_ijt");
        pos__ = 0U;
        validate_non_negative_index("delta_ijt", "N_j", N_j);
        validate_non_negative_index("delta_ijt", "N_t", N_t);
        validate_non_negative_index("delta_ijt", "N_i", N_i);
        context__.validate_dims("parameter initialization", "delta_ijt", "matrix_d", context__.to_vec(N_i,N_j,N_t));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> > delta_ijt(N_i, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N_j, N_t));
        size_t delta_ijt_j_2_max__ = N_t;
        size_t delta_ijt_j_1_max__ = N_j;
        size_t delta_ijt_k_0_max__ = N_i;
        for (size_t j_2__ = 0; j_2__ < delta_ijt_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < delta_ijt_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < delta_ijt_k_0_max__; ++k_0__) {
                    delta_ijt[k_0__](j_1__, j_2__) = vals_r__[pos__++];
                }
            }
        }
        size_t delta_ijt_i_0_max__ = N_i;
        for (size_t i_0__ = 0; i_0__ < delta_ijt_i_0_max__; ++i_0__) {
            try {
                writer__.matrix_unconstrain(delta_ijt[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable delta_ijt: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 38;
        if (!(context__.contains_r("rho_i")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable rho_i missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("rho_i");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "rho_i", "double", context__.to_vec());
        double rho_i(0);
        rho_i = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(-(1), 1, rho_i);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable rho_i: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 39;
        if (!(context__.contains_r("rho_j")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable rho_j missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("rho_j");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "rho_j", "double", context__.to_vec());
        double rho_j(0);
        rho_j = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(-(1), 1, rho_j);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable rho_j: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 40;
        if (!(context__.contains_r("rho_t")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable rho_t missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("rho_t");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "rho_t", "double", context__.to_vec());
        double rho_t(0);
        rho_t = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(-(1), 1, rho_t);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable rho_t: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 41;
        if (!(context__.contains_r("rho_ij")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable rho_ij missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("rho_ij");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "rho_ij", "double", context__.to_vec());
        double rho_ij(0);
        rho_ij = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(-(1), 1, rho_ij);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable rho_ij: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 44;
        if (!(context__.contains_r("sigma_a")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_a missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_a");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_a", "double", context__.to_vec());
        double sigma_a(0);
        sigma_a = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_a);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_a: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 45;
        if (!(context__.contains_r("sigma_o")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_o missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_o");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_o", "double", context__.to_vec());
        double sigma_o(0);
        sigma_o = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_o);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_o: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 47;
        if (!(context__.contains_r("sigma_s")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_s missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_s");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_s", "double", context__.to_vec());
        double sigma_s(0);
        sigma_s = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 0.4, sigma_s);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_s: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 50;
        if (!(context__.contains_r("sigma_i")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_i missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_i");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_i", "double", context__.to_vec());
        double sigma_i(0);
        sigma_i = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_i);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_i: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 51;
        if (!(context__.contains_r("sigma_j")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_j missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_j");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_j", "double", context__.to_vec());
        double sigma_j(0);
        sigma_j = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_j);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_j: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 52;
        if (!(context__.contains_r("sigma_t")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_t missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_t");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_t", "double", context__.to_vec());
        double sigma_t(0);
        sigma_t = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_t);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_t: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 53;
        if (!(context__.contains_r("sigma_it")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_it missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_it");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_it", "double", context__.to_vec());
        double sigma_it(0);
        sigma_it = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_it);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_it: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 54;
        if (!(context__.contains_r("sigma_jt")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_jt missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_jt");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_jt", "double", context__.to_vec());
        double sigma_jt(0);
        sigma_jt = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_jt);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_jt: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 55;
        if (!(context__.contains_r("sigma_ij")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_ij missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_ij");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_ij", "double", context__.to_vec());
        double sigma_ij(0);
        sigma_ij = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_ij);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_ij: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 56;
        if (!(context__.contains_r("sigma_ijt")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_ijt missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_ijt");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_ijt", "double", context__.to_vec());
        double sigma_ijt(0);
        sigma_ijt = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_ijt);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_ijt: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 26;
            std::vector<local_scalar_t__> lambda_a;
            size_t lambda_a_d_0_max__ = N_j;
            lambda_a.reserve(lambda_a_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < lambda_a_d_0_max__; ++d_0__) {
                if (jacobian__)
                    lambda_a.push_back(in__.scalar_constrain(lp__));
                else
                    lambda_a.push_back(in__.scalar_constrain());
            }
            current_statement_begin__ = 27;
            std::vector<local_scalar_t__> lambda_o;
            size_t lambda_o_d_0_max__ = N_j;
            lambda_o.reserve(lambda_o_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < lambda_o_d_0_max__; ++d_0__) {
                if (jacobian__)
                    lambda_o.push_back(in__.scalar_constrain(lp__));
                else
                    lambda_o.push_back(in__.scalar_constrain());
            }
            current_statement_begin__ = 28;
            std::vector<local_scalar_t__> lambda_s;
            size_t lambda_s_d_0_max__ = N_j;
            lambda_s.reserve(lambda_s_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < lambda_s_d_0_max__; ++d_0__) {
                if (jacobian__)
                    lambda_s.push_back(in__.scalar_constrain(lp__));
                else
                    lambda_s.push_back(in__.scalar_constrain());
            }
            current_statement_begin__ = 30;
            std::vector<local_scalar_t__> beta_i;
            size_t beta_i_d_0_max__ = N_i;
            beta_i.reserve(beta_i_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < beta_i_d_0_max__; ++d_0__) {
                if (jacobian__)
                    beta_i.push_back(in__.scalar_constrain(lp__));
                else
                    beta_i.push_back(in__.scalar_constrain());
            }
            current_statement_begin__ = 31;
            std::vector<local_scalar_t__> alpha_j;
            size_t alpha_j_d_0_max__ = N_j;
            alpha_j.reserve(alpha_j_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < alpha_j_d_0_max__; ++d_0__) {
                if (jacobian__)
                    alpha_j.push_back(in__.scalar_constrain(lp__));
                else
                    alpha_j.push_back(in__.scalar_constrain());
            }
            current_statement_begin__ = 32;
            std::vector<local_scalar_t__> phi_t;
            size_t phi_t_d_0_max__ = N_t;
            phi_t.reserve(phi_t_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < phi_t_d_0_max__; ++d_0__) {
                if (jacobian__)
                    phi_t.push_back(in__.scalar_constrain(lp__));
                else
                    phi_t.push_back(in__.scalar_constrain());
            }
            current_statement_begin__ = 33;
            std::vector<std::vector<local_scalar_t__> > gamma_it;
            size_t gamma_it_d_0_max__ = N_i;
            size_t gamma_it_d_1_max__ = N_t;
            gamma_it.resize(gamma_it_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < gamma_it_d_0_max__; ++d_0__) {
                gamma_it[d_0__].reserve(gamma_it_d_1_max__);
                for (size_t d_1__ = 0; d_1__ < gamma_it_d_1_max__; ++d_1__) {
                    if (jacobian__)
                        gamma_it[d_0__].push_back(in__.scalar_constrain(lp__));
                    else
                        gamma_it[d_0__].push_back(in__.scalar_constrain());
                }
            }
            current_statement_begin__ = 34;
            std::vector<std::vector<local_scalar_t__> > gamma_jt;
            size_t gamma_jt_d_0_max__ = N_j;
            size_t gamma_jt_d_1_max__ = N_t;
            gamma_jt.resize(gamma_jt_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < gamma_jt_d_0_max__; ++d_0__) {
                gamma_jt[d_0__].reserve(gamma_jt_d_1_max__);
                for (size_t d_1__ = 0; d_1__ < gamma_jt_d_1_max__; ++d_1__) {
                    if (jacobian__)
                        gamma_jt[d_0__].push_back(in__.scalar_constrain(lp__));
                    else
                        gamma_jt[d_0__].push_back(in__.scalar_constrain());
                }
            }
            current_statement_begin__ = 35;
            std::vector<std::vector<local_scalar_t__> > gamma_ij;
            size_t gamma_ij_d_0_max__ = N_i;
            size_t gamma_ij_d_1_max__ = N_j;
            gamma_ij.resize(gamma_ij_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < gamma_ij_d_0_max__; ++d_0__) {
                gamma_ij[d_0__].reserve(gamma_ij_d_1_max__);
                for (size_t d_1__ = 0; d_1__ < gamma_ij_d_1_max__; ++d_1__) {
                    if (jacobian__)
                        gamma_ij[d_0__].push_back(in__.scalar_constrain(lp__));
                    else
                        gamma_ij[d_0__].push_back(in__.scalar_constrain());
                }
            }
            current_statement_begin__ = 36;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> > delta_ijt;
            size_t delta_ijt_d_0_max__ = N_i;
            delta_ijt.reserve(delta_ijt_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < delta_ijt_d_0_max__; ++d_0__) {
                if (jacobian__)
                    delta_ijt.push_back(in__.matrix_constrain(N_j, N_t, lp__));
                else
                    delta_ijt.push_back(in__.matrix_constrain(N_j, N_t));
            }
            current_statement_begin__ = 38;
            local_scalar_t__ rho_i;
            (void) rho_i;  // dummy to suppress unused var warning
            if (jacobian__)
                rho_i = in__.scalar_lub_constrain(-(1), 1, lp__);
            else
                rho_i = in__.scalar_lub_constrain(-(1), 1);
            current_statement_begin__ = 39;
            local_scalar_t__ rho_j;
            (void) rho_j;  // dummy to suppress unused var warning
            if (jacobian__)
                rho_j = in__.scalar_lub_constrain(-(1), 1, lp__);
            else
                rho_j = in__.scalar_lub_constrain(-(1), 1);
            current_statement_begin__ = 40;
            local_scalar_t__ rho_t;
            (void) rho_t;  // dummy to suppress unused var warning
            if (jacobian__)
                rho_t = in__.scalar_lub_constrain(-(1), 1, lp__);
            else
                rho_t = in__.scalar_lub_constrain(-(1), 1);
            current_statement_begin__ = 41;
            local_scalar_t__ rho_ij;
            (void) rho_ij;  // dummy to suppress unused var warning
            if (jacobian__)
                rho_ij = in__.scalar_lub_constrain(-(1), 1, lp__);
            else
                rho_ij = in__.scalar_lub_constrain(-(1), 1);
            current_statement_begin__ = 44;
            local_scalar_t__ sigma_a;
            (void) sigma_a;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_a = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_a = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 45;
            local_scalar_t__ sigma_o;
            (void) sigma_o;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_o = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_o = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 47;
            local_scalar_t__ sigma_s;
            (void) sigma_s;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_s = in__.scalar_lub_constrain(0, 0.4, lp__);
            else
                sigma_s = in__.scalar_lub_constrain(0, 0.4);
            current_statement_begin__ = 50;
            local_scalar_t__ sigma_i;
            (void) sigma_i;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_i = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_i = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 51;
            local_scalar_t__ sigma_j;
            (void) sigma_j;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_j = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_j = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 52;
            local_scalar_t__ sigma_t;
            (void) sigma_t;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_t = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_t = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 53;
            local_scalar_t__ sigma_it;
            (void) sigma_it;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_it = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_it = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 54;
            local_scalar_t__ sigma_jt;
            (void) sigma_jt;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_jt = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_jt = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 55;
            local_scalar_t__ sigma_ij;
            (void) sigma_ij;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_ij = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_ij = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 56;
            local_scalar_t__ sigma_ijt;
            (void) sigma_ijt;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_ijt = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_ijt = in__.scalar_lb_constrain(0);
            // transformed parameters
            current_statement_begin__ = 61;
            validate_non_negative_index("mu", "N_t", N_t);
            validate_non_negative_index("mu", "N_j", N_j);
            validate_non_negative_index("mu", "N_i", N_i);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> > mu(N_i, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>(N_t, N_j));
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 64;
            for (int ii = 1; ii <= N_i; ++ii) {
                current_statement_begin__ = 65;
                for (int jj = 1; jj <= N_j; ++jj) {
                    current_statement_begin__ = 66;
                    for (int tt = 1; tt <= N_t; ++tt) {
                        current_statement_begin__ = 67;
                        stan::model::assign(mu, 
                                    stan::model::cons_list(stan::model::index_uni(ii), stan::model::cons_list(stan::model::index_uni(tt), stan::model::cons_list(stan::model::index_uni(jj), stan::model::nil_index_list()))), 
                                    ((((((get_base1(beta_i, ii, "beta_i", 1) + get_base1(alpha_j, jj, "alpha_j", 1)) + get_base1(phi_t, tt, "phi_t", 1)) + get_base1(get_base1(gamma_it, ii, "gamma_it", 1), tt, "gamma_it", 2)) + get_base1(get_base1(gamma_jt, jj, "gamma_jt", 1), tt, "gamma_jt", 2)) + get_base1(get_base1(gamma_ij, ii, "gamma_ij", 1), jj, "gamma_ij", 2)) + get_base1(get_base1(delta_ijt, ii, "delta_ijt", 1), jj, tt, "delta_ijt", 2)), 
                                    "assigning variable mu");
                    }
                }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 61;
            size_t mu_k_0_max__ = N_i;
            size_t mu_j_1_max__ = N_t;
            size_t mu_j_2_max__ = N_j;
            for (size_t k_0__ = 0; k_0__ < mu_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                    for (size_t j_2__ = 0; j_2__ < mu_j_2_max__; ++j_2__) {
                        if (stan::math::is_uninitialized(mu[k_0__](j_1__, j_2__))) {
                            std::stringstream msg__;
                            msg__ << "Undefined transformed parameter: mu" << "[" << k_0__ << "]" << "(" << j_1__ << ", " << j_2__ << ")";
                            stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable mu: ") + msg__.str()), current_statement_begin__, prog_reader__());
                        }
                    }
                }
            }
            // model body
            current_statement_begin__ = 75;
            lp_accum__.add(normal_log<propto__>(beta_i, 0, sigma_i));
            current_statement_begin__ = 76;
            lp_accum__.add(normal_log<propto__>(alpha_j, 0, sigma_j));
            current_statement_begin__ = 77;
            lp_accum__.add(normal_log<propto__>(lambda_a, 0, 1));
            current_statement_begin__ = 78;
            lp_accum__.add(normal_log<propto__>(lambda_o, 0, 1));
            current_statement_begin__ = 79;
            lp_accum__.add(normal_log<propto__>(lambda_s, 0, 1));
            current_statement_begin__ = 81;
            lp_accum__.add(cauchy_log<propto__>(sigma_a, 0, 2));
            current_statement_begin__ = 82;
            lp_accum__.add(cauchy_log<propto__>(sigma_o, 0, 2));
            current_statement_begin__ = 83;
            lp_accum__.add(cauchy_log<propto__>(sigma_s, 0, 0.2));
            current_statement_begin__ = 90;
            lp_accum__.add(normal_log<propto__>(get_base1(phi_t, 1, "phi_t", 1), 0, stan::math::sqrt((pow(sigma_t, 2) / (1 - pow(rho_t, 2))))));
            current_statement_begin__ = 91;
            for (int tt = 2; tt <= N_t; ++tt) {
                current_statement_begin__ = 92;
                lp_accum__.add(normal_log<propto__>(get_base1(phi_t, tt, "phi_t", 1), (rho_t * get_base1(phi_t, (tt - 1), "phi_t", 1)), sigma_t));
            }
            current_statement_begin__ = 96;
            for (int ii = 1; ii <= N_i; ++ii) {
                current_statement_begin__ = 97;
                lp_accum__.add(normal_log<propto__>(get_base1(get_base1(gamma_it, ii, "gamma_it", 1), 1, "gamma_it", 2), 0, stan::math::sqrt((pow(sigma_it, 2) / (1 - pow(rho_i, 2))))));
                current_statement_begin__ = 99;
                for (int tt = 2; tt <= N_t; ++tt) {
                    current_statement_begin__ = 100;
                    lp_accum__.add(normal_log<propto__>(get_base1(get_base1(gamma_it, ii, "gamma_it", 1), tt, "gamma_it", 2), (rho_i * get_base1(get_base1(gamma_it, ii, "gamma_it", 1), (tt - 1), "gamma_it", 2)), sigma_it));
                }
            }
            current_statement_begin__ = 105;
            for (int jj = 1; jj <= N_j; ++jj) {
                current_statement_begin__ = 106;
                lp_accum__.add(normal_log<propto__>(get_base1(get_base1(gamma_jt, jj, "gamma_jt", 1), 1, "gamma_jt", 2), 0, stan::math::sqrt((pow(sigma_jt, 2) / (1 - pow(rho_j, 2))))));
                current_statement_begin__ = 108;
                for (int tt = 2; tt <= N_t; ++tt) {
                    current_statement_begin__ = 109;
                    lp_accum__.add(normal_log<propto__>(get_base1(get_base1(gamma_jt, jj, "gamma_jt", 1), tt, "gamma_jt", 2), (rho_j * get_base1(get_base1(gamma_jt, jj, "gamma_jt", 1), (tt - 1), "gamma_jt", 2)), sigma_jt));
                }
            }
            current_statement_begin__ = 114;
            for (int ii = 1; ii <= N_i; ++ii) {
                current_statement_begin__ = 115;
                for (int jj = 1; jj <= N_j; ++jj) {
                    current_statement_begin__ = 116;
                    lp_accum__.add(normal_log<propto__>(get_base1(get_base1(gamma_ij, ii, "gamma_ij", 1), jj, "gamma_ij", 2), 0, sigma_ij));
                }
            }
            current_statement_begin__ = 121;
            for (int ii = 1; ii <= N_i; ++ii) {
                current_statement_begin__ = 122;
                for (int jj = 1; jj <= N_j; ++jj) {
                    current_statement_begin__ = 123;
                    lp_accum__.add(normal_log<propto__>(get_base1(get_base1(delta_ijt, ii, "delta_ijt", 1), jj, 1, "delta_ijt", 2), 0, stan::math::sqrt((pow(sigma_ijt, 2) / (1 - pow(rho_ij, 2))))));
                    current_statement_begin__ = 125;
                    for (int tt = 2; tt <= N_t; ++tt) {
                        current_statement_begin__ = 126;
                        lp_accum__.add(normal_log<propto__>(get_base1(get_base1(delta_ijt, ii, "delta_ijt", 1), jj, tt, "delta_ijt", 2), (rho_ij * get_base1(get_base1(delta_ijt, ii, "delta_ijt", 1), jj, (tt - 1), "delta_ijt", 2)), sigma_ijt));
                    }
                }
            }
            current_statement_begin__ = 133;
            for (int n_a = 1; n_a <= N_a; ++n_a) {
                current_statement_begin__ = 134;
                lp_accum__.add(normal_log<propto__>(get_base1(y, n_a, "y", 1), get_base1(get_base1(mu, get_base1(i, n_a, "i", 1), "mu", 1), get_base1(t, n_a, "t", 1), get_base1(j, n_a, "j", 1), "mu", 2), sigma_a));
            }
            current_statement_begin__ = 136;
            for (int n_o = start_o; n_o <= ((start_o + N_o) - 1); ++n_o) {
                current_statement_begin__ = 137;
                lp_accum__.add(normal_log<propto__>(get_base1(y, n_o, "y", 1), get_base1(get_base1(mu, get_base1(i, n_o, "i", 1), "mu", 1), get_base1(t, n_o, "t", 1), get_base1(j, n_o, "j", 1), "mu", 2), sigma_o));
            }
            current_statement_begin__ = 139;
            for (int n_s = start_s; n_s <= ((start_s + N_s) - 1); ++n_s) {
                current_statement_begin__ = 140;
                lp_accum__.add(normal_log<propto__>(get_base1(y, n_s, "y", 1), get_base1(get_base1(mu, get_base1(i, n_s, "i", 1), "mu", 1), get_base1(t, n_s, "t", 1), get_base1(j, n_s, "j", 1), "mu", 2), sigma_s));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("lambda_a");
        names__.push_back("lambda_o");
        names__.push_back("lambda_s");
        names__.push_back("beta_i");
        names__.push_back("alpha_j");
        names__.push_back("phi_t");
        names__.push_back("gamma_it");
        names__.push_back("gamma_jt");
        names__.push_back("gamma_ij");
        names__.push_back("delta_ijt");
        names__.push_back("rho_i");
        names__.push_back("rho_j");
        names__.push_back("rho_t");
        names__.push_back("rho_ij");
        names__.push_back("sigma_a");
        names__.push_back("sigma_o");
        names__.push_back("sigma_s");
        names__.push_back("sigma_i");
        names__.push_back("sigma_j");
        names__.push_back("sigma_t");
        names__.push_back("sigma_it");
        names__.push_back("sigma_jt");
        names__.push_back("sigma_ij");
        names__.push_back("sigma_ijt");
        names__.push_back("mu");
        names__.push_back("log_lik");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(N_j);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_j);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_j);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_i);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_j);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_t);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_i);
        dims__.push_back(N_t);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_j);
        dims__.push_back(N_t);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_i);
        dims__.push_back(N_j);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_i);
        dims__.push_back(N_j);
        dims__.push_back(N_t);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_i);
        dims__.push_back(N_t);
        dims__.push_back(N_j);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_multi_lik_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<double> lambda_a;
        size_t lambda_a_d_0_max__ = N_j;
        lambda_a.reserve(lambda_a_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < lambda_a_d_0_max__; ++d_0__) {
            lambda_a.push_back(in__.scalar_constrain());
        }
        size_t lambda_a_k_0_max__ = N_j;
        for (size_t k_0__ = 0; k_0__ < lambda_a_k_0_max__; ++k_0__) {
            vars__.push_back(lambda_a[k_0__]);
        }
        std::vector<double> lambda_o;
        size_t lambda_o_d_0_max__ = N_j;
        lambda_o.reserve(lambda_o_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < lambda_o_d_0_max__; ++d_0__) {
            lambda_o.push_back(in__.scalar_constrain());
        }
        size_t lambda_o_k_0_max__ = N_j;
        for (size_t k_0__ = 0; k_0__ < lambda_o_k_0_max__; ++k_0__) {
            vars__.push_back(lambda_o[k_0__]);
        }
        std::vector<double> lambda_s;
        size_t lambda_s_d_0_max__ = N_j;
        lambda_s.reserve(lambda_s_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < lambda_s_d_0_max__; ++d_0__) {
            lambda_s.push_back(in__.scalar_constrain());
        }
        size_t lambda_s_k_0_max__ = N_j;
        for (size_t k_0__ = 0; k_0__ < lambda_s_k_0_max__; ++k_0__) {
            vars__.push_back(lambda_s[k_0__]);
        }
        std::vector<double> beta_i;
        size_t beta_i_d_0_max__ = N_i;
        beta_i.reserve(beta_i_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < beta_i_d_0_max__; ++d_0__) {
            beta_i.push_back(in__.scalar_constrain());
        }
        size_t beta_i_k_0_max__ = N_i;
        for (size_t k_0__ = 0; k_0__ < beta_i_k_0_max__; ++k_0__) {
            vars__.push_back(beta_i[k_0__]);
        }
        std::vector<double> alpha_j;
        size_t alpha_j_d_0_max__ = N_j;
        alpha_j.reserve(alpha_j_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < alpha_j_d_0_max__; ++d_0__) {
            alpha_j.push_back(in__.scalar_constrain());
        }
        size_t alpha_j_k_0_max__ = N_j;
        for (size_t k_0__ = 0; k_0__ < alpha_j_k_0_max__; ++k_0__) {
            vars__.push_back(alpha_j[k_0__]);
        }
        std::vector<double> phi_t;
        size_t phi_t_d_0_max__ = N_t;
        phi_t.reserve(phi_t_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < phi_t_d_0_max__; ++d_0__) {
            phi_t.push_back(in__.scalar_constrain());
        }
        size_t phi_t_k_0_max__ = N_t;
        for (size_t k_0__ = 0; k_0__ < phi_t_k_0_max__; ++k_0__) {
            vars__.push_back(phi_t[k_0__]);
        }
        std::vector<std::vector<double> > gamma_it;
        size_t gamma_it_d_0_max__ = N_i;
        size_t gamma_it_d_1_max__ = N_t;
        gamma_it.resize(gamma_it_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < gamma_it_d_0_max__; ++d_0__) {
            gamma_it[d_0__].reserve(gamma_it_d_1_max__);
            for (size_t d_1__ = 0; d_1__ < gamma_it_d_1_max__; ++d_1__) {
                gamma_it[d_0__].push_back(in__.scalar_constrain());
            }
        }
        size_t gamma_it_k_0_max__ = N_i;
        size_t gamma_it_k_1_max__ = N_t;
        for (size_t k_1__ = 0; k_1__ < gamma_it_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < gamma_it_k_0_max__; ++k_0__) {
                vars__.push_back(gamma_it[k_0__][k_1__]);
            }
        }
        std::vector<std::vector<double> > gamma_jt;
        size_t gamma_jt_d_0_max__ = N_j;
        size_t gamma_jt_d_1_max__ = N_t;
        gamma_jt.resize(gamma_jt_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < gamma_jt_d_0_max__; ++d_0__) {
            gamma_jt[d_0__].reserve(gamma_jt_d_1_max__);
            for (size_t d_1__ = 0; d_1__ < gamma_jt_d_1_max__; ++d_1__) {
                gamma_jt[d_0__].push_back(in__.scalar_constrain());
            }
        }
        size_t gamma_jt_k_0_max__ = N_j;
        size_t gamma_jt_k_1_max__ = N_t;
        for (size_t k_1__ = 0; k_1__ < gamma_jt_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < gamma_jt_k_0_max__; ++k_0__) {
                vars__.push_back(gamma_jt[k_0__][k_1__]);
            }
        }
        std::vector<std::vector<double> > gamma_ij;
        size_t gamma_ij_d_0_max__ = N_i;
        size_t gamma_ij_d_1_max__ = N_j;
        gamma_ij.resize(gamma_ij_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < gamma_ij_d_0_max__; ++d_0__) {
            gamma_ij[d_0__].reserve(gamma_ij_d_1_max__);
            for (size_t d_1__ = 0; d_1__ < gamma_ij_d_1_max__; ++d_1__) {
                gamma_ij[d_0__].push_back(in__.scalar_constrain());
            }
        }
        size_t gamma_ij_k_0_max__ = N_i;
        size_t gamma_ij_k_1_max__ = N_j;
        for (size_t k_1__ = 0; k_1__ < gamma_ij_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < gamma_ij_k_0_max__; ++k_0__) {
                vars__.push_back(gamma_ij[k_0__][k_1__]);
            }
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> > delta_ijt;
        size_t delta_ijt_d_0_max__ = N_i;
        delta_ijt.reserve(delta_ijt_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < delta_ijt_d_0_max__; ++d_0__) {
            delta_ijt.push_back(in__.matrix_constrain(N_j, N_t));
        }
        size_t delta_ijt_j_2_max__ = N_t;
        size_t delta_ijt_j_1_max__ = N_j;
        size_t delta_ijt_k_0_max__ = N_i;
        for (size_t j_2__ = 0; j_2__ < delta_ijt_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < delta_ijt_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < delta_ijt_k_0_max__; ++k_0__) {
                    vars__.push_back(delta_ijt[k_0__](j_1__, j_2__));
                }
            }
        }
        double rho_i = in__.scalar_lub_constrain(-(1), 1);
        vars__.push_back(rho_i);
        double rho_j = in__.scalar_lub_constrain(-(1), 1);
        vars__.push_back(rho_j);
        double rho_t = in__.scalar_lub_constrain(-(1), 1);
        vars__.push_back(rho_t);
        double rho_ij = in__.scalar_lub_constrain(-(1), 1);
        vars__.push_back(rho_ij);
        double sigma_a = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_a);
        double sigma_o = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_o);
        double sigma_s = in__.scalar_lub_constrain(0, 0.4);
        vars__.push_back(sigma_s);
        double sigma_i = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_i);
        double sigma_j = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_j);
        double sigma_t = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_t);
        double sigma_it = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_it);
        double sigma_jt = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_jt);
        double sigma_ij = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_ij);
        double sigma_ijt = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_ijt);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 61;
            validate_non_negative_index("mu", "N_t", N_t);
            validate_non_negative_index("mu", "N_j", N_j);
            validate_non_negative_index("mu", "N_i", N_i);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> > mu(N_i, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N_t, N_j));
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 64;
            for (int ii = 1; ii <= N_i; ++ii) {
                current_statement_begin__ = 65;
                for (int jj = 1; jj <= N_j; ++jj) {
                    current_statement_begin__ = 66;
                    for (int tt = 1; tt <= N_t; ++tt) {
                        current_statement_begin__ = 67;
                        stan::model::assign(mu, 
                                    stan::model::cons_list(stan::model::index_uni(ii), stan::model::cons_list(stan::model::index_uni(tt), stan::model::cons_list(stan::model::index_uni(jj), stan::model::nil_index_list()))), 
                                    ((((((get_base1(beta_i, ii, "beta_i", 1) + get_base1(alpha_j, jj, "alpha_j", 1)) + get_base1(phi_t, tt, "phi_t", 1)) + get_base1(get_base1(gamma_it, ii, "gamma_it", 1), tt, "gamma_it", 2)) + get_base1(get_base1(gamma_jt, jj, "gamma_jt", 1), tt, "gamma_jt", 2)) + get_base1(get_base1(gamma_ij, ii, "gamma_ij", 1), jj, "gamma_ij", 2)) + get_base1(get_base1(delta_ijt, ii, "delta_ijt", 1), jj, tt, "delta_ijt", 2)), 
                                    "assigning variable mu");
                    }
                }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t mu_j_2_max__ = N_j;
                size_t mu_j_1_max__ = N_t;
                size_t mu_k_0_max__ = N_i;
                for (size_t j_2__ = 0; j_2__ < mu_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                        for (size_t k_0__ = 0; k_0__ < mu_k_0_max__; ++k_0__) {
                            vars__.push_back(mu[k_0__](j_1__, j_2__));
                        }
                    }
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 145;
            validate_non_negative_index("log_lik", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_lik(N);
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 147;
            for (int n_a = 1; n_a <= N_a; ++n_a) {
                current_statement_begin__ = 148;
                stan::model::assign(log_lik, 
                            stan::model::cons_list(stan::model::index_uni(n_a), stan::model::nil_index_list()), 
                            normal_log(get_base1(y, n_a, "y", 1), get_base1(get_base1(mu, get_base1(i, n_a, "i", 1), "mu", 1), get_base1(t, n_a, "t", 1), get_base1(j, n_a, "j", 1), "mu", 2), sigma_a), 
                            "assigning variable log_lik");
            }
            current_statement_begin__ = 150;
            for (int n_o = start_o; n_o <= ((start_o + N_o) - 1); ++n_o) {
                current_statement_begin__ = 151;
                stan::model::assign(log_lik, 
                            stan::model::cons_list(stan::model::index_uni(n_o), stan::model::nil_index_list()), 
                            normal_log(get_base1(y, n_o, "y", 1), get_base1(get_base1(mu, get_base1(i, n_o, "i", 1), "mu", 1), get_base1(t, n_o, "t", 1), get_base1(j, n_o, "j", 1), "mu", 2), sigma_o), 
                            "assigning variable log_lik");
            }
            current_statement_begin__ = 153;
            for (int n_s = start_s; n_s <= ((start_s + N_s) - 1); ++n_s) {
                current_statement_begin__ = 154;
                stan::model::assign(log_lik, 
                            stan::model::cons_list(stan::model::index_uni(n_s), stan::model::nil_index_list()), 
                            normal_log(get_base1(y, n_s, "y", 1), get_base1(get_base1(mu, get_base1(i, n_s, "i", 1), "mu", 1), get_base1(t, n_s, "t", 1), get_base1(j, n_s, "j", 1), "mu", 2), sigma_s), 
                            "assigning variable log_lik");
            }
            // validate, write generated quantities
            current_statement_begin__ = 145;
            size_t log_lik_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                vars__.push_back(log_lik(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_multi_lik";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t lambda_a_k_0_max__ = N_j;
        for (size_t k_0__ = 0; k_0__ < lambda_a_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda_a" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lambda_o_k_0_max__ = N_j;
        for (size_t k_0__ = 0; k_0__ < lambda_o_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda_o" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lambda_s_k_0_max__ = N_j;
        for (size_t k_0__ = 0; k_0__ < lambda_s_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda_s" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_i_k_0_max__ = N_i;
        for (size_t k_0__ = 0; k_0__ < beta_i_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_i" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_j_k_0_max__ = N_j;
        for (size_t k_0__ = 0; k_0__ < alpha_j_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_j" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t phi_t_k_0_max__ = N_t;
        for (size_t k_0__ = 0; k_0__ < phi_t_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi_t" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gamma_it_k_0_max__ = N_i;
        size_t gamma_it_k_1_max__ = N_t;
        for (size_t k_1__ = 0; k_1__ < gamma_it_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < gamma_it_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "gamma_it" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t gamma_jt_k_0_max__ = N_j;
        size_t gamma_jt_k_1_max__ = N_t;
        for (size_t k_1__ = 0; k_1__ < gamma_jt_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < gamma_jt_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "gamma_jt" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t gamma_ij_k_0_max__ = N_i;
        size_t gamma_ij_k_1_max__ = N_j;
        for (size_t k_1__ = 0; k_1__ < gamma_ij_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < gamma_ij_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "gamma_ij" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t delta_ijt_j_2_max__ = N_t;
        size_t delta_ijt_j_1_max__ = N_j;
        size_t delta_ijt_k_0_max__ = N_i;
        for (size_t j_2__ = 0; j_2__ < delta_ijt_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < delta_ijt_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < delta_ijt_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "delta_ijt" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "rho_i";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rho_j";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rho_t";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rho_ij";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_a";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_o";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_s";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_i";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_j";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_t";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_it";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_jt";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_ij";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_ijt";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t mu_j_2_max__ = N_j;
            size_t mu_j_1_max__ = N_t;
            size_t mu_k_0_max__ = N_i;
            for (size_t j_2__ = 0; j_2__ < mu_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < mu_k_0_max__; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "mu" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
        }
        if (!include_gqs__) return;
        size_t log_lik_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t lambda_a_k_0_max__ = N_j;
        for (size_t k_0__ = 0; k_0__ < lambda_a_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda_a" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lambda_o_k_0_max__ = N_j;
        for (size_t k_0__ = 0; k_0__ < lambda_o_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda_o" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lambda_s_k_0_max__ = N_j;
        for (size_t k_0__ = 0; k_0__ < lambda_s_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda_s" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_i_k_0_max__ = N_i;
        for (size_t k_0__ = 0; k_0__ < beta_i_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_i" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_j_k_0_max__ = N_j;
        for (size_t k_0__ = 0; k_0__ < alpha_j_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_j" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t phi_t_k_0_max__ = N_t;
        for (size_t k_0__ = 0; k_0__ < phi_t_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi_t" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gamma_it_k_0_max__ = N_i;
        size_t gamma_it_k_1_max__ = N_t;
        for (size_t k_1__ = 0; k_1__ < gamma_it_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < gamma_it_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "gamma_it" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t gamma_jt_k_0_max__ = N_j;
        size_t gamma_jt_k_1_max__ = N_t;
        for (size_t k_1__ = 0; k_1__ < gamma_jt_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < gamma_jt_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "gamma_jt" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t gamma_ij_k_0_max__ = N_i;
        size_t gamma_ij_k_1_max__ = N_j;
        for (size_t k_1__ = 0; k_1__ < gamma_ij_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < gamma_ij_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "gamma_ij" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t delta_ijt_j_2_max__ = N_t;
        size_t delta_ijt_j_1_max__ = N_j;
        size_t delta_ijt_k_0_max__ = N_i;
        for (size_t j_2__ = 0; j_2__ < delta_ijt_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < delta_ijt_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < delta_ijt_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "delta_ijt" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "rho_i";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rho_j";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rho_t";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rho_ij";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_a";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_o";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_s";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_i";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_j";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_t";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_it";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_jt";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_ij";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_ijt";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t mu_j_2_max__ = N_j;
            size_t mu_j_1_max__ = N_t;
            size_t mu_k_0_max__ = N_i;
            for (size_t j_2__ = 0; j_2__ < mu_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < mu_k_0_max__; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "mu" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
        }
        if (!include_gqs__) return;
        size_t log_lik_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_multi_lik_namespace::model_multi_lik stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
