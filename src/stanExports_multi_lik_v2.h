// Generated by rstantools.  Do not edit by hand.

/*
    imcover is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    imcover is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with imcover.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_multi_lik_v2_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 137> locations_array__ =
  {" (found before start of program)",
  " (in 'multi_lik_v2', line 30, column 2 to column 26)",
  " (in 'multi_lik_v2', line 31, column 2 to column 34)",
  " (in 'multi_lik_v2', line 32, column 2 to column 20)",
  " (in 'multi_lik_v2', line 33, column 2 to column 21)",
  " (in 'multi_lik_v2', line 35, column 2 to column 39)",
  " (in 'multi_lik_v2', line 36, column 2 to column 26)",
  " (in 'multi_lik_v2', line 37, column 2 to column 39)",
  " (in 'multi_lik_v2', line 38, column 2 to column 64)",
  " (in 'multi_lik_v2', line 40, column 2 to column 50)",
  " (in 'multi_lik_v2', line 41, column 2 to column 32)",
  " (in 'multi_lik_v2', line 42, column 2 to column 32)",
  " (in 'multi_lik_v2', line 43, column 2 to column 51)",
  " (in 'multi_lik_v2', line 45, column 2 to column 47)",
  " (in 'multi_lik_v2', line 46, column 2 to column 42)",
  " (in 'multi_lik_v2', line 47, column 2 to column 24)",
  " (in 'multi_lik_v2', line 48, column 2 to column 24)",
  " (in 'multi_lik_v2', line 49, column 2 to column 43)",
  " (in 'multi_lik_v2', line 50, column 2 to column 25)",
  " (in 'multi_lik_v2', line 51, column 2 to column 43)",
  " (in 'multi_lik_v2', line 52, column 2 to column 44)",
  " (in 'multi_lik_v2', line 56, column 2 to column 29)",
  " (in 'multi_lik_v2', line 58, column 2 to column 70)",
  " (in 'multi_lik_v2', line 128, column 2 to column 20)",
  " (in 'multi_lik_v2', line 66, column 6 to column 81)",
  " (in 'multi_lik_v2', line 65, column 34 to line 67, column 5)",
  " (in 'multi_lik_v2', line 65, column 4 to line 67, column 5)",
  " (in 'multi_lik_v2', line 64, column 8 to line 68, column 3)",
  " (in 'multi_lik_v2', line 62, column 6 to column 192)",
  " (in 'multi_lik_v2', line 61, column 34 to line 63, column 5)",
  " (in 'multi_lik_v2', line 61, column 4 to line 63, column 5)",
  " (in 'multi_lik_v2', line 60, column 13 to line 64, column 3)",
  " (in 'multi_lik_v2', line 60, column 2 to line 68, column 3)",
  " (in 'multi_lik_v2', line 130, column 4 to column 102)",
  " (in 'multi_lik_v2', line 129, column 17 to line 131, column 3)",
  " (in 'multi_lik_v2', line 129, column 2 to line 131, column 3)",
  " (in 'multi_lik_v2', line 71, column 2 to column 31)",
  " (in 'multi_lik_v2', line 73, column 4 to column 55)",
  " (in 'multi_lik_v2', line 74, column 4 to column 57)",
  " (in 'multi_lik_v2', line 72, column 22 to line 75, column 3)",
  " (in 'multi_lik_v2', line 72, column 2 to line 75, column 3)",
  " (in 'multi_lik_v2', line 78, column 2 to column 68)",
  " (in 'multi_lik_v2', line 80, column 3 to column 60)",
  " (in 'multi_lik_v2', line 79, column 20 to line 81, column 3)",
  " (in 'multi_lik_v2', line 79, column 2 to line 81, column 3)",
  " (in 'multi_lik_v2', line 84, column 4 to column 77)",
  " (in 'multi_lik_v2', line 86, column 6 to column 76)",
  " (in 'multi_lik_v2', line 85, column 22 to line 87, column 5)",
  " (in 'multi_lik_v2', line 85, column 4 to line 87, column 5)",
  " (in 'multi_lik_v2', line 83, column 19 to line 88, column 3)",
  " (in 'multi_lik_v2', line 83, column 2 to line 88, column 3)",
  " (in 'multi_lik_v2', line 91, column 4 to column 35)",
  " (in 'multi_lik_v2', line 94, column 6 to column 84)",
  " (in 'multi_lik_v2', line 96, column 8 to column 82)",
  " (in 'multi_lik_v2', line 95, column 24 to line 97, column 7)",
  " (in 'multi_lik_v2', line 95, column 6 to line 97, column 7)",
  " (in 'multi_lik_v2', line 93, column 22 to line 98, column 5)",
  " (in 'multi_lik_v2', line 93, column 4 to line 98, column 5)",
  " (in 'multi_lik_v2', line 102, column 6 to column 49)",
  " (in 'multi_lik_v2', line 101, column 22 to line 103, column 6)",
  " (in 'multi_lik_v2', line 101, column 5 to line 103, column 6)",
  " (in 'multi_lik_v2', line 100, column 22 to line 104, column 5)",
  " (in 'multi_lik_v2', line 100, column 4 to line 104, column 5)",
  " (in 'multi_lik_v2', line 108, column 8 to column 96)",
  " (in 'multi_lik_v2', line 110, column 10 to column 102)",
  " (in 'multi_lik_v2', line 109, column 26 to line 111, column 9)",
  " (in 'multi_lik_v2', line 109, column 8 to line 111, column 9)",
  " (in 'multi_lik_v2', line 107, column 23 to line 112, column 7)",
  " (in 'multi_lik_v2', line 107, column 6 to line 112, column 7)",
  " (in 'multi_lik_v2', line 106, column 22 to line 113, column 5)",
  " (in 'multi_lik_v2', line 106, column 4 to line 113, column 5)",
  " (in 'multi_lik_v2', line 90, column 13 to line 114, column 3)",
  " (in 'multi_lik_v2', line 90, column 2 to line 114, column 3)",
  " (in 'multi_lik_v2', line 117, column 4 to column 18)",
  " (in 'multi_lik_v2', line 120, column 6 to column 39)",
  " (in 'multi_lik_v2', line 121, column 6 to column 108)",
  " (in 'multi_lik_v2', line 122, column 6 to column 22)",
  " (in 'multi_lik_v2', line 119, column 26 to line 123, column 5)",
  " (in 'multi_lik_v2', line 119, column 4 to line 123, column 5)",
  " (in 'multi_lik_v2', line 116, column 2 to line 124, column 3)",
  " (in 'multi_lik_v2', line 125, column 2 to column 27)",
  " (in 'multi_lik_v2', line 5, column 2 to column 17)",
  " (in 'multi_lik_v2', line 6, column 2 to column 19)",
  " (in 'multi_lik_v2', line 7, column 2 to column 19)",
  " (in 'multi_lik_v2', line 8, column 2 to column 19)",
  " (in 'multi_lik_v2', line 9, column 28 to column 29)",
  " (in 'multi_lik_v2', line 9, column 2 to column 31)",
  " (in 'multi_lik_v2', line 10, column 28 to column 29)",
  " (in 'multi_lik_v2', line 10, column 2 to column 31)",
  " (in 'multi_lik_v2', line 11, column 28 to column 29)",
  " (in 'multi_lik_v2', line 11, column 2 to column 31)",
  " (in 'multi_lik_v2', line 12, column 9 to column 10)",
  " (in 'multi_lik_v2', line 12, column 2 to column 14)",
  " (in 'multi_lik_v2', line 13, column 2 to column 24)",
  " (in 'multi_lik_v2', line 14, column 38 to column 39)",
  " (in 'multi_lik_v2', line 14, column 2 to column 41)",
  " (in 'multi_lik_v2', line 15, column 21 to column 29)",
  " (in 'multi_lik_v2', line 15, column 2 to column 31)",
  " (in 'multi_lik_v2', line 17, column 9 to column 17)",
  " (in 'multi_lik_v2', line 17, column 2 to column 27)",
  " (in 'multi_lik_v2', line 19, column 9 to column 17)",
  " (in 'multi_lik_v2', line 19, column 2 to column 27)",
  " (in 'multi_lik_v2', line 20, column 20 to column 28)",
  " (in 'multi_lik_v2', line 20, column 2 to column 30)",
  " (in 'multi_lik_v2', line 21, column 19 to column 27)",
  " (in 'multi_lik_v2', line 21, column 2 to column 29)",
  " (in 'multi_lik_v2', line 23, column 48 to column 49)",
  " (in 'multi_lik_v2', line 23, column 2 to column 51)",
  " (in 'multi_lik_v2', line 24, column 29 to column 44)",
  " (in 'multi_lik_v2', line 24, column 2 to column 46)",
  " (in 'multi_lik_v2', line 25, column 29 to column 44)",
  " (in 'multi_lik_v2', line 25, column 2 to column 46)",
  " (in 'multi_lik_v2', line 26, column 29 to column 44)",
  " (in 'multi_lik_v2', line 26, column 2 to column 46)",
  " (in 'multi_lik_v2', line 30, column 9 to column 17)",
  " (in 'multi_lik_v2', line 31, column 14 to column 32)",
  " (in 'multi_lik_v2', line 32, column 15 to column 18)",
  " (in 'multi_lik_v2', line 33, column 16 to column 19)",
  " (in 'multi_lik_v2', line 35, column 14 to column 32)",
  " (in 'multi_lik_v2', line 35, column 34 to column 37)",
  " (in 'multi_lik_v2', line 36, column 16 to column 19)",
  " (in 'multi_lik_v2', line 36, column 21 to column 24)",
  " (in 'multi_lik_v2', line 37, column 14 to column 32)",
  " (in 'multi_lik_v2', line 37, column 34 to column 37)",
  " (in 'multi_lik_v2', line 38, column 44 to column 62)",
  " (in 'multi_lik_v2', line 38, column 9 to column 27)",
  " (in 'multi_lik_v2', line 38, column 29 to column 32)",
  " (in 'multi_lik_v2', line 40, column 32 to column 48)",
  " (in 'multi_lik_v2', line 43, column 33 to column 49)",
  " (in 'multi_lik_v2', line 45, column 27 to column 35)",
  " (in 'multi_lik_v2', line 46, column 24 to column 40)",
  " (in 'multi_lik_v2', line 49, column 25 to column 41)",
  " (in 'multi_lik_v2', line 51, column 25 to column 41)",
  " (in 'multi_lik_v2', line 52, column 26 to column 42)",
  " (in 'multi_lik_v2', line 56, column 9 to column 24)",
  " (in 'multi_lik_v2', line 58, column 9 to column 17)",
  " (in 'multi_lik_v2', line 128, column 9 to column 10)"};
#include <stan_meta_header.hpp>
class model_multi_lik_v2 final : public model_base_crtp<model_multi_lik_v2> {
private:
  int N;
  int N_i;
  int N_j;
  int N_t;
  std::vector<int> i;
  std::vector<int> j;
  std::vector<int> t;
  Eigen::Matrix<double,-1,1> y_data__;
  int nsources;
  std::vector<int> source;
  std::vector<int> sizes;
  Eigen::Matrix<double,-1,1> U_sigma_data__;
  Eigen::Matrix<double,-1,1> L_sigma_data__;
  std::vector<double> prior_lambda;
  std::vector<double> prior_sigma;
  std::vector<int> mu_lookup;
  std::vector<int> ii;
  std::vector<int> jj;
  std::vector<int> tt;
  int beta_i_1dim__;
  int phi_it_1dim__;
  int psi_ij_1dim__;
  int omega_ijt_1dim__;
  int omega_ijt_2dim__;
  int rho_i_1dim__;
  int rho_ij_1dim__;
  int sigma_i_1dim__;
  int sigma_it_1dim__;
  int sigma_ij_1dim__;
  int sigma_ijt_1dim__;
  int mu_1dim__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> y{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> U_sigma{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> L_sigma{nullptr, 0};
public:
  ~model_multi_lik_v2() {}
  model_multi_lik_v2(stan::io::var_context& context__, unsigned int
                     random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_multi_lik_v2_namespace::model_multi_lik_v2";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 81;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 81;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 81;
      stan::math::check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 82;
      context__.validate_dims("data initialization", "N_i", "int",
        std::vector<size_t>{});
      N_i = std::numeric_limits<int>::min();
      current_statement__ = 82;
      N_i = context__.vals_i("N_i")[(1 - 1)];
      current_statement__ = 82;
      stan::math::check_greater_or_equal(function__, "N_i", N_i, 1);
      current_statement__ = 83;
      context__.validate_dims("data initialization", "N_j", "int",
        std::vector<size_t>{});
      N_j = std::numeric_limits<int>::min();
      current_statement__ = 83;
      N_j = context__.vals_i("N_j")[(1 - 1)];
      current_statement__ = 83;
      stan::math::check_greater_or_equal(function__, "N_j", N_j, 1);
      current_statement__ = 84;
      context__.validate_dims("data initialization", "N_t", "int",
        std::vector<size_t>{});
      N_t = std::numeric_limits<int>::min();
      current_statement__ = 84;
      N_t = context__.vals_i("N_t")[(1 - 1)];
      current_statement__ = 84;
      stan::math::check_greater_or_equal(function__, "N_t", N_t, 1);
      current_statement__ = 85;
      stan::math::validate_non_negative_index("i", "N", N);
      current_statement__ = 86;
      context__.validate_dims("data initialization", "i", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      i = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 86;
      i = context__.vals_i("i");
      current_statement__ = 86;
      stan::math::check_greater_or_equal(function__, "i", i, 1);
      current_statement__ = 86;
      stan::math::check_less_or_equal(function__, "i", i, N_i);
      current_statement__ = 87;
      stan::math::validate_non_negative_index("j", "N", N);
      current_statement__ = 88;
      context__.validate_dims("data initialization", "j", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      j = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 88;
      j = context__.vals_i("j");
      current_statement__ = 88;
      stan::math::check_greater_or_equal(function__, "j", j, 1);
      current_statement__ = 88;
      stan::math::check_less_or_equal(function__, "j", j, N_j);
      current_statement__ = 89;
      stan::math::validate_non_negative_index("t", "N", N);
      current_statement__ = 90;
      context__.validate_dims("data initialization", "t", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      t = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 90;
      t = context__.vals_i("t");
      current_statement__ = 90;
      stan::math::check_greater_or_equal(function__, "t", t, 1);
      current_statement__ = 90;
      stan::math::check_less_or_equal(function__, "t", t, N_t);
      current_statement__ = 91;
      stan::math::validate_non_negative_index("y", "N", N);
      current_statement__ = 92;
      context__.validate_dims("data initialization", "y", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      y_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                   std::numeric_limits<double>::quiet_NaN());
      new (&y) Eigen::Map<Eigen::Matrix<double,-1,1>>(y_data__.data(), N);
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 92;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 92;
        pos__ = 1;
        current_statement__ = 92;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 92;
          stan::model::assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", stan::model::index_uni(sym1__));
          current_statement__ = 92;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 93;
      context__.validate_dims("data initialization", "nsources", "int",
        std::vector<size_t>{});
      nsources = std::numeric_limits<int>::min();
      current_statement__ = 93;
      nsources = context__.vals_i("nsources")[(1 - 1)];
      current_statement__ = 93;
      stan::math::check_greater_or_equal(function__, "nsources", nsources, 1);
      current_statement__ = 94;
      stan::math::validate_non_negative_index("source", "N", N);
      current_statement__ = 95;
      context__.validate_dims("data initialization", "source", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      source = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 95;
      source = context__.vals_i("source");
      current_statement__ = 95;
      stan::math::check_greater_or_equal(function__, "source", source, 1);
      current_statement__ = 95;
      stan::math::check_less_or_equal(function__, "source", source, nsources);
      current_statement__ = 96;
      stan::math::validate_non_negative_index("sizes", "nsources", nsources);
      current_statement__ = 97;
      context__.validate_dims("data initialization", "sizes", "int",
        std::vector<size_t>{static_cast<size_t>(nsources)});
      sizes = std::vector<int>(nsources, std::numeric_limits<int>::min());
      current_statement__ = 97;
      sizes = context__.vals_i("sizes");
      current_statement__ = 97;
      stan::math::check_greater_or_equal(function__, "sizes", sizes, 1);
      current_statement__ = 98;
      stan::math::validate_non_negative_index("U_sigma", "nsources", nsources);
      current_statement__ = 99;
      context__.validate_dims("data initialization", "U_sigma", "double",
        std::vector<size_t>{static_cast<size_t>(nsources)});
      U_sigma_data__ = Eigen::Matrix<double,-1,1>::Constant(nsources,
                         std::numeric_limits<double>::quiet_NaN());
      new (&U_sigma)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(U_sigma_data__.data(),
        nsources);
      {
        std::vector<local_scalar_t__> U_sigma_flat__;
        current_statement__ = 99;
        U_sigma_flat__ = context__.vals_r("U_sigma");
        current_statement__ = 99;
        pos__ = 1;
        current_statement__ = 99;
        for (int sym1__ = 1; sym1__ <= nsources; ++sym1__) {
          current_statement__ = 99;
          stan::model::assign(U_sigma, U_sigma_flat__[(pos__ - 1)],
            "assigning variable U_sigma", stan::model::index_uni(sym1__));
          current_statement__ = 99;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 100;
      stan::math::validate_non_negative_index("L_sigma", "nsources", nsources);
      current_statement__ = 101;
      context__.validate_dims("data initialization", "L_sigma", "double",
        std::vector<size_t>{static_cast<size_t>(nsources)});
      L_sigma_data__ = Eigen::Matrix<double,-1,1>::Constant(nsources,
                         std::numeric_limits<double>::quiet_NaN());
      new (&L_sigma)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(L_sigma_data__.data(),
        nsources);
      {
        std::vector<local_scalar_t__> L_sigma_flat__;
        current_statement__ = 101;
        L_sigma_flat__ = context__.vals_r("L_sigma");
        current_statement__ = 101;
        pos__ = 1;
        current_statement__ = 101;
        for (int sym1__ = 1; sym1__ <= nsources; ++sym1__) {
          current_statement__ = 101;
          stan::model::assign(L_sigma, L_sigma_flat__[(pos__ - 1)],
            "assigning variable L_sigma", stan::model::index_uni(sym1__));
          current_statement__ = 101;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 102;
      stan::math::validate_non_negative_index("prior_lambda", "nsources",
        nsources);
      current_statement__ = 103;
      context__.validate_dims("data initialization", "prior_lambda",
        "double", std::vector<size_t>{static_cast<size_t>(nsources)});
      prior_lambda = std::vector<double>(nsources,
                       std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 103;
      prior_lambda = context__.vals_r("prior_lambda");
      current_statement__ = 104;
      stan::math::validate_non_negative_index("prior_sigma", "nsources",
        nsources);
      current_statement__ = 105;
      context__.validate_dims("data initialization", "prior_sigma", "double",
        std::vector<size_t>{static_cast<size_t>(nsources)});
      prior_sigma = std::vector<double>(nsources,
                      std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 105;
      prior_sigma = context__.vals_r("prior_sigma");
      current_statement__ = 106;
      stan::math::validate_non_negative_index("mu_lookup", "N", N);
      current_statement__ = 107;
      context__.validate_dims("data initialization", "mu_lookup", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      mu_lookup = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 107;
      mu_lookup = context__.vals_i("mu_lookup");
      current_statement__ = 107;
      stan::math::check_greater_or_equal(function__, "mu_lookup", mu_lookup,
        1);
      current_statement__ = 107;
      stan::math::check_less_or_equal(function__, "mu_lookup", mu_lookup,
        ((N_i * N_j) * N_t));
      current_statement__ = 108;
      stan::math::validate_non_negative_index("ii", "N_i * N_j * N_t", ((N_i
        * N_j) * N_t));
      current_statement__ = 109;
      context__.validate_dims("data initialization", "ii", "int",
        std::vector<size_t>{static_cast<size_t>(((N_i * N_j) * N_t))});
      ii = std::vector<int>(((N_i * N_j) * N_t),
             std::numeric_limits<int>::min());
      current_statement__ = 109;
      ii = context__.vals_i("ii");
      current_statement__ = 109;
      stan::math::check_greater_or_equal(function__, "ii", ii, 1);
      current_statement__ = 109;
      stan::math::check_less_or_equal(function__, "ii", ii, N_i);
      current_statement__ = 110;
      stan::math::validate_non_negative_index("jj", "N_i * N_j * N_t", ((N_i
        * N_j) * N_t));
      current_statement__ = 111;
      context__.validate_dims("data initialization", "jj", "int",
        std::vector<size_t>{static_cast<size_t>(((N_i * N_j) * N_t))});
      jj = std::vector<int>(((N_i * N_j) * N_t),
             std::numeric_limits<int>::min());
      current_statement__ = 111;
      jj = context__.vals_i("jj");
      current_statement__ = 111;
      stan::math::check_greater_or_equal(function__, "jj", jj, 1);
      current_statement__ = 111;
      stan::math::check_less_or_equal(function__, "jj", jj, N_j);
      current_statement__ = 112;
      stan::math::validate_non_negative_index("tt", "N_i * N_j * N_t", ((N_i
        * N_j) * N_t));
      current_statement__ = 113;
      context__.validate_dims("data initialization", "tt", "int",
        std::vector<size_t>{static_cast<size_t>(((N_i * N_j) * N_t))});
      tt = std::vector<int>(((N_i * N_j) * N_t),
             std::numeric_limits<int>::min());
      current_statement__ = 113;
      tt = context__.vals_i("tt");
      current_statement__ = 113;
      stan::math::check_greater_or_equal(function__, "tt", tt, 1);
      current_statement__ = 113;
      stan::math::check_less_or_equal(function__, "tt", tt, N_t);
      current_statement__ = 114;
      stan::math::validate_non_negative_index("lambda", "nsources", nsources);
      current_statement__ = 115;
      beta_i_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 115;
      beta_i_1dim__ = (stan::math::logical_eq(N_i, 1) ? 0 : N_i);
      current_statement__ = 115;
      stan::math::validate_non_negative_index("beta_i", "N_i == 1 ? 0 : N_i",
        beta_i_1dim__);
      current_statement__ = 116;
      stan::math::validate_non_negative_index("alpha_j", "N_j", N_j);
      current_statement__ = 117;
      stan::math::validate_non_negative_index("gamma_t", "N_t", N_t);
      current_statement__ = 118;
      phi_it_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 118;
      phi_it_1dim__ = (stan::math::logical_eq(N_i, 1) ? 0 : N_i);
      current_statement__ = 118;
      stan::math::validate_non_negative_index("phi_it", "N_i == 1 ? 0 : N_i",
        phi_it_1dim__);
      current_statement__ = 119;
      stan::math::validate_non_negative_index("phi_it", "N_t", N_t);
      current_statement__ = 120;
      stan::math::validate_non_negative_index("delta_jt", "N_j", N_j);
      current_statement__ = 121;
      stan::math::validate_non_negative_index("delta_jt", "N_t", N_t);
      current_statement__ = 122;
      psi_ij_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 122;
      psi_ij_1dim__ = (stan::math::logical_eq(N_i, 1) ? 0 : N_i);
      current_statement__ = 122;
      stan::math::validate_non_negative_index("psi_ij", "N_i == 1 ? 0 : N_i",
        psi_ij_1dim__);
      current_statement__ = 123;
      stan::math::validate_non_negative_index("psi_ij", "N_j", N_j);
      current_statement__ = 124;
      omega_ijt_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 124;
      omega_ijt_1dim__ = (stan::math::logical_eq(N_i, 1) ? 0 : N_i);
      current_statement__ = 124;
      stan::math::validate_non_negative_index("omega_ijt",
        "N_i == 1 ? 0 : N_i", omega_ijt_1dim__);
      current_statement__ = 125;
      omega_ijt_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 125;
      omega_ijt_2dim__ = (stan::math::logical_eq(N_i, 1) ? 0 : N_j);
      current_statement__ = 125;
      stan::math::validate_non_negative_index("omega_ijt",
        "N_i == 1 ? 0 : N_j", omega_ijt_2dim__);
      current_statement__ = 126;
      stan::math::validate_non_negative_index("omega_ijt", "N_t", N_t);
      current_statement__ = 127;
      rho_i_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 127;
      rho_i_1dim__ = (stan::math::logical_eq(N_i, 1) ? 0 : 1);
      current_statement__ = 127;
      stan::math::validate_non_negative_index("rho_i", "N_i == 1 ? 0 : 1",
        rho_i_1dim__);
      current_statement__ = 128;
      rho_ij_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 128;
      rho_ij_1dim__ = (stan::math::logical_eq(N_i, 1) ? 0 : 1);
      current_statement__ = 128;
      stan::math::validate_non_negative_index("rho_ij", "N_i == 1 ? 0 : 1",
        rho_ij_1dim__);
      current_statement__ = 129;
      stan::math::validate_non_negative_index("sigma_raw", "nsources",
        nsources);
      current_statement__ = 130;
      sigma_i_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 130;
      sigma_i_1dim__ = (stan::math::logical_eq(N_i, 1) ? 0 : 1);
      current_statement__ = 130;
      stan::math::validate_non_negative_index("sigma_i", "N_i == 1 ? 0 : 1",
        sigma_i_1dim__);
      current_statement__ = 131;
      sigma_it_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 131;
      sigma_it_1dim__ = (stan::math::logical_eq(N_i, 1) ? 0 : 1);
      current_statement__ = 131;
      stan::math::validate_non_negative_index("sigma_it", "N_i == 1 ? 0 : 1",
        sigma_it_1dim__);
      current_statement__ = 132;
      sigma_ij_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 132;
      sigma_ij_1dim__ = (stan::math::logical_eq(N_i, 1) ? 0 : 1);
      current_statement__ = 132;
      stan::math::validate_non_negative_index("sigma_ij", "N_i == 1 ? 0 : 1",
        sigma_ij_1dim__);
      current_statement__ = 133;
      sigma_ijt_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 133;
      sigma_ijt_1dim__ = (stan::math::logical_eq(N_i, 1) ? 0 : 1);
      current_statement__ = 133;
      stan::math::validate_non_negative_index("sigma_ijt",
        "N_i == 1 ? 0 : 1", sigma_ijt_1dim__);
      current_statement__ = 134;
      mu_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 134;
      mu_1dim__ = ((N_t * N_j) * N_i);
      current_statement__ = 134;
      stan::math::validate_non_negative_index("mu", "N_t * N_j * N_i",
        mu_1dim__);
      current_statement__ = 135;
      stan::math::validate_non_negative_index("sigma", "nsources", nsources);
      current_statement__ = 136;
      stan::math::validate_non_negative_index("log_lik", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = nsources + beta_i_1dim__ + N_j + N_t + (phi_it_1dim__ *
      N_t) + (N_j * N_t) + (psi_ij_1dim__ * N_j) + (omega_ijt_1dim__ *
      omega_ijt_2dim__ * N_t) + rho_i_1dim__ + 1 + 1 + rho_ij_1dim__ +
      nsources + sigma_i_1dim__ + 1 + 1 + sigma_it_1dim__ + 1 +
      sigma_ij_1dim__ + sigma_ijt_1dim__;
  }
  inline std::string model_name() const final {
    return "model_multi_lik_v2";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_multi_lik_v2_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> lambda =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nsources, DUMMY_VAR__);
      current_statement__ = 1;
      lambda = in__.template read<
                 Eigen::Matrix<local_scalar_t__,-1,1>>(nsources);
      std::vector<local_scalar_t__> beta_i =
        std::vector<local_scalar_t__>(beta_i_1dim__, DUMMY_VAR__);
      current_statement__ = 2;
      beta_i = in__.template read<
                 std::vector<local_scalar_t__>>(beta_i_1dim__);
      std::vector<local_scalar_t__> alpha_j =
        std::vector<local_scalar_t__>(N_j, DUMMY_VAR__);
      current_statement__ = 3;
      alpha_j = in__.template read<std::vector<local_scalar_t__>>(N_j);
      std::vector<local_scalar_t__> gamma_t =
        std::vector<local_scalar_t__>(N_t, DUMMY_VAR__);
      current_statement__ = 4;
      gamma_t = in__.template read<std::vector<local_scalar_t__>>(N_t);
      std::vector<std::vector<local_scalar_t__>> phi_it =
        std::vector<std::vector<local_scalar_t__>>(phi_it_1dim__,
          std::vector<local_scalar_t__>(N_t, DUMMY_VAR__));
      current_statement__ = 5;
      phi_it = in__.template read<
                 std::vector<std::vector<local_scalar_t__>>>(phi_it_1dim__,
                 N_t);
      std::vector<std::vector<local_scalar_t__>> delta_jt =
        std::vector<std::vector<local_scalar_t__>>(N_j,
          std::vector<local_scalar_t__>(N_t, DUMMY_VAR__));
      current_statement__ = 6;
      delta_jt = in__.template read<
                   std::vector<std::vector<local_scalar_t__>>>(N_j, N_t);
      std::vector<std::vector<local_scalar_t__>> psi_ij =
        std::vector<std::vector<local_scalar_t__>>(psi_ij_1dim__,
          std::vector<local_scalar_t__>(N_j, DUMMY_VAR__));
      current_statement__ = 7;
      psi_ij = in__.template read<
                 std::vector<std::vector<local_scalar_t__>>>(psi_ij_1dim__,
                 N_j);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> omega_ijt =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(omega_ijt_1dim__,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(omega_ijt_2dim__,
            N_t, DUMMY_VAR__));
      current_statement__ = 8;
      omega_ijt = in__.template read<
                    std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>>(omega_ijt_1dim__,
                    omega_ijt_2dim__, N_t);
      std::vector<local_scalar_t__> rho_i =
        std::vector<local_scalar_t__>(rho_i_1dim__, DUMMY_VAR__);
      current_statement__ = 9;
      rho_i = in__.template read_constrain_lub<std::vector<local_scalar_t__>,
                jacobian__>(-1, 1, lp__, rho_i_1dim__);
      local_scalar_t__ rho_j = DUMMY_VAR__;
      current_statement__ = 10;
      rho_j = in__.template read_constrain_lub<local_scalar_t__,
                jacobian__>(-1, 1, lp__);
      local_scalar_t__ rho_t = DUMMY_VAR__;
      current_statement__ = 11;
      rho_t = in__.template read_constrain_lub<local_scalar_t__,
                jacobian__>(-1, 1, lp__);
      std::vector<local_scalar_t__> rho_ij =
        std::vector<local_scalar_t__>(rho_ij_1dim__, DUMMY_VAR__);
      current_statement__ = 12;
      rho_ij = in__.template read_constrain_lub<
                 std::vector<local_scalar_t__>, jacobian__>(-1, 1, lp__,
                 rho_ij_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nsources, DUMMY_VAR__);
      current_statement__ = 13;
      sigma_raw = in__.template read_constrain_lub<
                    Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, 1,
                    lp__, nsources);
      std::vector<local_scalar_t__> sigma_i =
        std::vector<local_scalar_t__>(sigma_i_1dim__, DUMMY_VAR__);
      current_statement__ = 14;
      sigma_i = in__.template read_constrain_lb<
                  std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                  sigma_i_1dim__);
      local_scalar_t__ sigma_j = DUMMY_VAR__;
      current_statement__ = 15;
      sigma_j = in__.template read_constrain_lb<local_scalar_t__,
                  jacobian__>(0, lp__);
      local_scalar_t__ sigma_t = DUMMY_VAR__;
      current_statement__ = 16;
      sigma_t = in__.template read_constrain_lb<local_scalar_t__,
                  jacobian__>(0, lp__);
      std::vector<local_scalar_t__> sigma_it =
        std::vector<local_scalar_t__>(sigma_it_1dim__, DUMMY_VAR__);
      current_statement__ = 17;
      sigma_it = in__.template read_constrain_lb<
                   std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                   sigma_it_1dim__);
      local_scalar_t__ sigma_jt = DUMMY_VAR__;
      current_statement__ = 18;
      sigma_jt = in__.template read_constrain_lb<local_scalar_t__,
                   jacobian__>(0, lp__);
      std::vector<local_scalar_t__> sigma_ij =
        std::vector<local_scalar_t__>(sigma_ij_1dim__, DUMMY_VAR__);
      current_statement__ = 19;
      sigma_ij = in__.template read_constrain_lb<
                   std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                   sigma_ij_1dim__);
      std::vector<local_scalar_t__> sigma_ijt =
        std::vector<local_scalar_t__>(sigma_ijt_1dim__, DUMMY_VAR__);
      current_statement__ = 20;
      sigma_ijt = in__.template read_constrain_lb<
                    std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                    sigma_ijt_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(mu_1dim__,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nsources, DUMMY_VAR__);
      current_statement__ = 22;
      stan::model::assign(sigma,
        stan::math::add(L_sigma,
          stan::math::elt_multiply(stan::math::subtract(U_sigma, L_sigma),
            sigma_raw)), "assigning variable sigma");
      current_statement__ = 32;
      if (stan::math::logical_gt(N_i, 1)) {
        current_statement__ = 30;
        for (int idx = 1; idx <= stan::math::num_elements(mu); ++idx) {
          current_statement__ = 28;
          stan::model::assign(mu,
            ((((((stan::model::rvalue(beta_i, "beta_i",
                    stan::model::index_uni(
                      stan::model::rvalue(ii, "ii",
                        stan::model::index_uni(idx)))) +
            stan::model::rvalue(alpha_j, "alpha_j",
              stan::model::index_uni(
                stan::model::rvalue(jj, "jj", stan::model::index_uni(idx)))))
            +
            stan::model::rvalue(gamma_t, "gamma_t",
              stan::model::index_uni(
                stan::model::rvalue(tt, "tt", stan::model::index_uni(idx)))))
            +
            stan::model::rvalue(phi_it, "phi_it",
              stan::model::index_uni(
                stan::model::rvalue(ii, "ii", stan::model::index_uni(idx))),
              stan::model::index_uni(
                stan::model::rvalue(tt, "tt", stan::model::index_uni(idx)))))
            +
            stan::model::rvalue(delta_jt, "delta_jt",
              stan::model::index_uni(
                stan::model::rvalue(jj, "jj", stan::model::index_uni(idx))),
              stan::model::index_uni(
                stan::model::rvalue(tt, "tt", stan::model::index_uni(idx)))))
            +
            stan::model::rvalue(psi_ij, "psi_ij",
              stan::model::index_uni(
                stan::model::rvalue(ii, "ii", stan::model::index_uni(idx))),
              stan::model::index_uni(
                stan::model::rvalue(jj, "jj", stan::model::index_uni(idx)))))
            +
            stan::model::rvalue(omega_ijt, "omega_ijt",
              stan::model::index_uni(
                stan::model::rvalue(ii, "ii", stan::model::index_uni(idx))),
              stan::model::index_uni(
                stan::model::rvalue(jj, "jj", stan::model::index_uni(idx))),
              stan::model::index_uni(
                stan::model::rvalue(tt, "tt", stan::model::index_uni(idx))))),
            "assigning variable mu", stan::model::index_uni(idx));
        }
      } else {
        current_statement__ = 26;
        for (int idx = 1; idx <= stan::math::num_elements(mu); ++idx) {
          current_statement__ = 24;
          stan::model::assign(mu,
            ((stan::model::rvalue(alpha_j, "alpha_j",
                stan::model::index_uni(
                  stan::model::rvalue(jj, "jj", stan::model::index_uni(idx))))
            +
            stan::model::rvalue(gamma_t, "gamma_t",
              stan::model::index_uni(
                stan::model::rvalue(tt, "tt", stan::model::index_uni(idx)))))
            +
            stan::model::rvalue(delta_jt, "delta_jt",
              stan::model::index_uni(
                stan::model::rvalue(jj, "jj", stan::model::index_uni(idx))),
              stan::model::index_uni(
                stan::model::rvalue(tt, "tt", stan::model::index_uni(idx))))),
            "assigning variable mu", stan::model::index_uni(idx));
        }
      }
      {
        current_statement__ = 36;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(alpha_j, 0, sigma_j));
        current_statement__ = 40;
        for (int s = 1; s <= nsources; ++s) {
          current_statement__ = 37;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::math::segment(lambda, s, 1), 0,
                           stan::model::rvalue(prior_lambda, "prior_lambda",
                             stan::model::index_uni(s))));
          current_statement__ = 38;
          lp_accum__.add(stan::math::cauchy_lpdf<propto__>(
                           stan::math::segment(sigma_raw, s, 1), 0,
                           stan::model::rvalue(prior_sigma, "prior_sigma",
                             stan::model::index_uni(s))));
        }
        current_statement__ = 41;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         stan::model::rvalue(gamma_t, "gamma_t",
                           stan::model::index_uni(1)), 0,
                         stan::math::sqrt((stan::math::pow(sigma_t, 2) / (1 -
                           stan::math::pow(rho_t, 2))))));
        current_statement__ = 44;
        for (int time = 2; time <= N_t; ++time) {
          current_statement__ = 42;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(gamma_t, "gamma_t",
                             stan::model::index_uni(time)), (rho_t *
                           stan::model::rvalue(gamma_t, "gamma_t",
                             stan::model::index_uni((time - 1)))), sigma_t));
        }
        current_statement__ = 50;
        for (int vax = 1; vax <= N_j; ++vax) {
          current_statement__ = 45;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(delta_jt, "delta_jt",
                             stan::model::index_uni(vax),
                             stan::model::index_uni(1)), 0,
                           stan::math::sqrt((stan::math::pow(sigma_jt, 2) /
                             (1 - stan::math::pow(rho_j, 2))))));
          current_statement__ = 48;
          for (int time = 2; time <= N_t; ++time) {
            current_statement__ = 46;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(
                             stan::model::rvalue(delta_jt, "delta_jt",
                               stan::model::index_uni(vax),
                               stan::model::index_uni(time)), (rho_j *
                             stan::model::rvalue(delta_jt, "delta_jt",
                               stan::model::index_uni(vax),
                               stan::model::index_uni((time - 1)))), sigma_jt));
          }
        }
        current_statement__ = 72;
        if (stan::math::logical_gt(N_i, 1)) {
          current_statement__ = 51;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(beta_i, 0,
                           stan::model::rvalue(sigma_i, "sigma_i",
                             stan::model::index_uni(1))));
          current_statement__ = 57;
          for (int ctry = 1; ctry <= N_i; ++ctry) {
            current_statement__ = 52;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(
                             stan::model::rvalue(phi_it, "phi_it",
                               stan::model::index_uni(ctry),
                               stan::model::index_uni(1)), 0,
                             stan::math::sqrt(
                               (stan::math::pow(
                                  stan::model::rvalue(sigma_it, "sigma_it",
                                    stan::model::index_uni(1)), 2) / (1 -
                               stan::math::pow(
                                 stan::model::rvalue(rho_i, "rho_i",
                                   stan::model::index_uni(1)), 2))))));
            current_statement__ = 55;
            for (int time = 2; time <= N_t; ++time) {
              current_statement__ = 53;
              lp_accum__.add(stan::math::normal_lpdf<propto__>(
                               stan::model::rvalue(phi_it, "phi_it",
                                 stan::model::index_uni(ctry),
                                 stan::model::index_uni(time)),
                               (stan::model::rvalue(rho_i, "rho_i",
                                  stan::model::index_uni(1)) *
                               stan::model::rvalue(phi_it, "phi_it",
                                 stan::model::index_uni(ctry),
                                 stan::model::index_uni((time - 1)))),
                               stan::model::rvalue(sigma_it, "sigma_it",
                                 stan::model::index_uni(1))));
            }
          }
          current_statement__ = 62;
          for (int ctry = 1; ctry <= N_i; ++ctry) {
            current_statement__ = 60;
            for (int vax = 1; vax <= N_j; ++vax) {
              current_statement__ = 58;
              lp_accum__.add(stan::math::normal_lpdf<propto__>(
                               stan::model::rvalue(psi_ij, "psi_ij",
                                 stan::model::index_uni(ctry),
                                 stan::model::index_uni(vax)), 0,
                               stan::model::rvalue(sigma_ij, "sigma_ij",
                                 stan::model::index_uni(1))));
            }
          }
          current_statement__ = 70;
          for (int ctry = 1; ctry <= N_i; ++ctry) {
            current_statement__ = 68;
            for (int vax = 1; vax <= N_j; ++vax) {
              current_statement__ = 63;
              lp_accum__.add(stan::math::normal_lpdf<propto__>(
                               stan::model::rvalue(omega_ijt, "omega_ijt",
                                 stan::model::index_uni(ctry),
                                 stan::model::index_uni(vax),
                                 stan::model::index_uni(1)), 0,
                               stan::math::sqrt(
                                 (stan::math::pow(
                                    stan::model::rvalue(sigma_ijt,
                                      "sigma_ijt", stan::model::index_uni(1)),
                                    2) / (1 -
                                 stan::math::pow(
                                   stan::model::rvalue(rho_ij, "rho_ij",
                                     stan::model::index_uni(1)), 2))))));
              current_statement__ = 66;
              for (int time = 2; time <= N_t; ++time) {
                current_statement__ = 64;
                lp_accum__.add(stan::math::normal_lpdf<propto__>(
                                 stan::model::rvalue(omega_ijt, "omega_ijt",
                                   stan::model::index_uni(ctry),
                                   stan::model::index_uni(vax),
                                   stan::model::index_uni(time)),
                                 (stan::model::rvalue(rho_ij, "rho_ij",
                                    stan::model::index_uni(1)) *
                                 stan::model::rvalue(omega_ijt, "omega_ijt",
                                   stan::model::index_uni(ctry),
                                   stan::model::index_uni(vax),
                                   stan::model::index_uni((time - 1)))),
                                 stan::model::rvalue(sigma_ijt, "sigma_ijt",
                                   stan::model::index_uni(1))));
              }
            }
          }
        }
        {
          int start = std::numeric_limits<int>::min();
          current_statement__ = 73;
          start = 1;
          current_statement__ = 78;
          for (int idx = 1; idx <= nsources; ++idx) {
            int end = std::numeric_limits<int>::min();
            current_statement__ = 74;
            end = ((start +
              stan::model::rvalue(sizes, "sizes", stan::model::index_uni(idx)))
              - 1);
            current_statement__ = 75;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(
                             stan::model::rvalue(y, "y",
                               stan::model::index_min_max(start, end)),
                             stan::math::add(
                               stan::model::rvalue(lambda, "lambda",
                                 stan::model::index_multi(
                                   stan::model::rvalue(source, "source",
                                     stan::model::index_min_max(start, end)))),
                               stan::model::rvalue(mu, "mu",
                                 stan::model::index_multi(
                                   stan::model::rvalue(mu_lookup,
                                     "mu_lookup",
                                     stan::model::index_min_max(start, end))))),
                             stan::model::rvalue(sigma, "sigma",
                               stan::model::index_multi(
                                 stan::model::rvalue(source, "source",
                                   stan::model::index_min_max(start, end))))));
            current_statement__ = 76;
            start = (end + 1);
          }
        }
        current_statement__ = 80;
        lp_accum__.add(stan::math::sum(sigma_raw));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_multi_lik_v2_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> lambda =
        Eigen::Matrix<double,-1,1>::Constant(nsources,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      lambda = in__.template read<
                 Eigen::Matrix<local_scalar_t__,-1,1>>(nsources);
      std::vector<double> beta_i =
        std::vector<double>(beta_i_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      beta_i = in__.template read<
                 std::vector<local_scalar_t__>>(beta_i_1dim__);
      std::vector<double> alpha_j =
        std::vector<double>(N_j, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      alpha_j = in__.template read<std::vector<local_scalar_t__>>(N_j);
      std::vector<double> gamma_t =
        std::vector<double>(N_t, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      gamma_t = in__.template read<std::vector<local_scalar_t__>>(N_t);
      std::vector<std::vector<double>> phi_it =
        std::vector<std::vector<double>>(phi_it_1dim__,
          std::vector<double>(N_t, std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 5;
      phi_it = in__.template read<
                 std::vector<std::vector<local_scalar_t__>>>(phi_it_1dim__,
                 N_t);
      std::vector<std::vector<double>> delta_jt =
        std::vector<std::vector<double>>(N_j,
          std::vector<double>(N_t, std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 6;
      delta_jt = in__.template read<
                   std::vector<std::vector<local_scalar_t__>>>(N_j, N_t);
      std::vector<std::vector<double>> psi_ij =
        std::vector<std::vector<double>>(psi_ij_1dim__,
          std::vector<double>(N_j, std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 7;
      psi_ij = in__.template read<
                 std::vector<std::vector<local_scalar_t__>>>(psi_ij_1dim__,
                 N_j);
      std::vector<Eigen::Matrix<double,-1,-1>> omega_ijt =
        std::vector<Eigen::Matrix<double,-1,-1>>(omega_ijt_1dim__,
          Eigen::Matrix<double,-1,-1>::Constant(omega_ijt_2dim__, N_t,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 8;
      omega_ijt = in__.template read<
                    std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>>(omega_ijt_1dim__,
                    omega_ijt_2dim__, N_t);
      std::vector<double> rho_i =
        std::vector<double>(rho_i_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 9;
      rho_i = in__.template read_constrain_lub<std::vector<local_scalar_t__>,
                jacobian__>(-1, 1, lp__, rho_i_1dim__);
      double rho_j = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 10;
      rho_j = in__.template read_constrain_lub<local_scalar_t__,
                jacobian__>(-1, 1, lp__);
      double rho_t = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 11;
      rho_t = in__.template read_constrain_lub<local_scalar_t__,
                jacobian__>(-1, 1, lp__);
      std::vector<double> rho_ij =
        std::vector<double>(rho_ij_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 12;
      rho_ij = in__.template read_constrain_lub<
                 std::vector<local_scalar_t__>, jacobian__>(-1, 1, lp__,
                 rho_ij_1dim__);
      Eigen::Matrix<double,-1,1> sigma_raw =
        Eigen::Matrix<double,-1,1>::Constant(nsources,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 13;
      sigma_raw = in__.template read_constrain_lub<
                    Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, 1,
                    lp__, nsources);
      std::vector<double> sigma_i =
        std::vector<double>(sigma_i_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 14;
      sigma_i = in__.template read_constrain_lb<
                  std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                  sigma_i_1dim__);
      double sigma_j = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 15;
      sigma_j = in__.template read_constrain_lb<local_scalar_t__,
                  jacobian__>(0, lp__);
      double sigma_t = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 16;
      sigma_t = in__.template read_constrain_lb<local_scalar_t__,
                  jacobian__>(0, lp__);
      std::vector<double> sigma_it =
        std::vector<double>(sigma_it_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 17;
      sigma_it = in__.template read_constrain_lb<
                   std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                   sigma_it_1dim__);
      double sigma_jt = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 18;
      sigma_jt = in__.template read_constrain_lb<local_scalar_t__,
                   jacobian__>(0, lp__);
      std::vector<double> sigma_ij =
        std::vector<double>(sigma_ij_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 19;
      sigma_ij = in__.template read_constrain_lb<
                   std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                   sigma_ij_1dim__);
      std::vector<double> sigma_ijt =
        std::vector<double>(sigma_ijt_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 20;
      sigma_ijt = in__.template read_constrain_lb<
                    std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                    sigma_ijt_1dim__);
      Eigen::Matrix<double,-1,1> mu =
        Eigen::Matrix<double,-1,1>::Constant(mu_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> sigma =
        Eigen::Matrix<double,-1,1>::Constant(nsources,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(lambda);
      out__.write(beta_i);
      out__.write(alpha_j);
      out__.write(gamma_t);
      for (int sym1__ = 1; sym1__ <= N_t; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= phi_it_1dim__; ++sym2__) {
          out__.write(phi_it[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N_t; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_j; ++sym2__) {
          out__.write(delta_jt[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N_j; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= psi_ij_1dim__; ++sym2__) {
          out__.write(psi_ij[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N_t; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= omega_ijt_2dim__; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= omega_ijt_1dim__; ++sym3__) {
            out__.write(stan::model::rvalue(omega_ijt, "omega_ijt",
                          stan::model::index_uni(sym3__),
                          stan::model::index_uni(sym2__),
                          stan::model::index_uni(sym1__)));
          }
        }
      }
      out__.write(rho_i);
      out__.write(rho_j);
      out__.write(rho_t);
      out__.write(rho_ij);
      out__.write(sigma_raw);
      out__.write(sigma_i);
      out__.write(sigma_j);
      out__.write(sigma_t);
      out__.write(sigma_it);
      out__.write(sigma_jt);
      out__.write(sigma_ij);
      out__.write(sigma_ijt);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 22;
      stan::model::assign(sigma,
        stan::math::add(L_sigma,
          stan::math::elt_multiply(stan::math::subtract(U_sigma, L_sigma),
            sigma_raw)), "assigning variable sigma");
      current_statement__ = 32;
      if (stan::math::logical_gt(N_i, 1)) {
        current_statement__ = 30;
        for (int idx = 1; idx <= stan::math::num_elements(mu); ++idx) {
          current_statement__ = 28;
          stan::model::assign(mu,
            ((((((stan::model::rvalue(beta_i, "beta_i",
                    stan::model::index_uni(
                      stan::model::rvalue(ii, "ii",
                        stan::model::index_uni(idx)))) +
            stan::model::rvalue(alpha_j, "alpha_j",
              stan::model::index_uni(
                stan::model::rvalue(jj, "jj", stan::model::index_uni(idx)))))
            +
            stan::model::rvalue(gamma_t, "gamma_t",
              stan::model::index_uni(
                stan::model::rvalue(tt, "tt", stan::model::index_uni(idx)))))
            +
            stan::model::rvalue(phi_it, "phi_it",
              stan::model::index_uni(
                stan::model::rvalue(ii, "ii", stan::model::index_uni(idx))),
              stan::model::index_uni(
                stan::model::rvalue(tt, "tt", stan::model::index_uni(idx)))))
            +
            stan::model::rvalue(delta_jt, "delta_jt",
              stan::model::index_uni(
                stan::model::rvalue(jj, "jj", stan::model::index_uni(idx))),
              stan::model::index_uni(
                stan::model::rvalue(tt, "tt", stan::model::index_uni(idx)))))
            +
            stan::model::rvalue(psi_ij, "psi_ij",
              stan::model::index_uni(
                stan::model::rvalue(ii, "ii", stan::model::index_uni(idx))),
              stan::model::index_uni(
                stan::model::rvalue(jj, "jj", stan::model::index_uni(idx)))))
            +
            stan::model::rvalue(omega_ijt, "omega_ijt",
              stan::model::index_uni(
                stan::model::rvalue(ii, "ii", stan::model::index_uni(idx))),
              stan::model::index_uni(
                stan::model::rvalue(jj, "jj", stan::model::index_uni(idx))),
              stan::model::index_uni(
                stan::model::rvalue(tt, "tt", stan::model::index_uni(idx))))),
            "assigning variable mu", stan::model::index_uni(idx));
        }
      } else {
        current_statement__ = 26;
        for (int idx = 1; idx <= stan::math::num_elements(mu); ++idx) {
          current_statement__ = 24;
          stan::model::assign(mu,
            ((stan::model::rvalue(alpha_j, "alpha_j",
                stan::model::index_uni(
                  stan::model::rvalue(jj, "jj", stan::model::index_uni(idx))))
            +
            stan::model::rvalue(gamma_t, "gamma_t",
              stan::model::index_uni(
                stan::model::rvalue(tt, "tt", stan::model::index_uni(idx)))))
            +
            stan::model::rvalue(delta_jt, "delta_jt",
              stan::model::index_uni(
                stan::model::rvalue(jj, "jj", stan::model::index_uni(idx))),
              stan::model::index_uni(
                stan::model::rvalue(tt, "tt", stan::model::index_uni(idx))))),
            "assigning variable mu", stan::model::index_uni(idx));
        }
      }
      if (emit_transformed_parameters__) {
        out__.write(mu);
        out__.write(sigma);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> log_lik =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 35;
      for (int idx = 1; idx <= N; ++idx) {
        current_statement__ = 33;
        stan::model::assign(log_lik,
          stan::math::normal_lpdf<false>(
            stan::model::rvalue(y, "y", stan::model::index_uni(idx)),
            (stan::model::rvalue(lambda, "lambda",
               stan::model::index_uni(
                 stan::model::rvalue(source, "source",
                   stan::model::index_uni(idx)))) +
            stan::model::rvalue(mu, "mu",
              stan::model::index_uni(
                stan::model::rvalue(mu_lookup, "mu_lookup",
                  stan::model::index_uni(idx))))),
            stan::model::rvalue(sigma, "sigma",
              stan::model::index_uni(
                stan::model::rvalue(source, "source",
                  stan::model::index_uni(idx))))),
          "assigning variable log_lik", stan::model::index_uni(idx));
      }
      out__.write(log_lik);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> lambda =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nsources, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(lambda,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(nsources),
        "assigning variable lambda");
      out__.write(lambda);
      std::vector<local_scalar_t__> beta_i =
        std::vector<local_scalar_t__>(beta_i_1dim__, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(beta_i,
        in__.read<std::vector<local_scalar_t__>>(beta_i_1dim__),
        "assigning variable beta_i");
      out__.write(beta_i);
      std::vector<local_scalar_t__> alpha_j =
        std::vector<local_scalar_t__>(N_j, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(alpha_j,
        in__.read<std::vector<local_scalar_t__>>(N_j),
        "assigning variable alpha_j");
      out__.write(alpha_j);
      std::vector<local_scalar_t__> gamma_t =
        std::vector<local_scalar_t__>(N_t, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(gamma_t,
        in__.read<std::vector<local_scalar_t__>>(N_t),
        "assigning variable gamma_t");
      out__.write(gamma_t);
      std::vector<std::vector<local_scalar_t__>> phi_it =
        std::vector<std::vector<local_scalar_t__>>(phi_it_1dim__,
          std::vector<local_scalar_t__>(N_t, DUMMY_VAR__));
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= N_t; ++sym1__) {
        current_statement__ = 5;
        for (int sym2__ = 1; sym2__ <= phi_it_1dim__; ++sym2__) {
          current_statement__ = 5;
          phi_it[(sym2__ - 1)][(sym1__ - 1)] = in__.read<local_scalar_t__>();
        }
      }
      out__.write(phi_it);
      std::vector<std::vector<local_scalar_t__>> delta_jt =
        std::vector<std::vector<local_scalar_t__>>(N_j,
          std::vector<local_scalar_t__>(N_t, DUMMY_VAR__));
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= N_t; ++sym1__) {
        current_statement__ = 6;
        for (int sym2__ = 1; sym2__ <= N_j; ++sym2__) {
          current_statement__ = 6;
          delta_jt[(sym2__ - 1)][(sym1__ -
            1)] = in__.read<local_scalar_t__>();
        }
      }
      out__.write(delta_jt);
      std::vector<std::vector<local_scalar_t__>> psi_ij =
        std::vector<std::vector<local_scalar_t__>>(psi_ij_1dim__,
          std::vector<local_scalar_t__>(N_j, DUMMY_VAR__));
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= N_j; ++sym1__) {
        current_statement__ = 7;
        for (int sym2__ = 1; sym2__ <= psi_ij_1dim__; ++sym2__) {
          current_statement__ = 7;
          psi_ij[(sym2__ - 1)][(sym1__ - 1)] = in__.read<local_scalar_t__>();
        }
      }
      out__.write(psi_ij);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> omega_ijt =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(omega_ijt_1dim__,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(omega_ijt_2dim__,
            N_t, DUMMY_VAR__));
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= N_t; ++sym1__) {
        current_statement__ = 8;
        for (int sym2__ = 1; sym2__ <= omega_ijt_2dim__; ++sym2__) {
          current_statement__ = 8;
          for (int sym3__ = 1; sym3__ <= omega_ijt_1dim__; ++sym3__) {
            current_statement__ = 8;
            stan::model::assign(omega_ijt, in__.read<local_scalar_t__>(),
              "assigning variable omega_ijt", stan::model::index_uni(sym3__),
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
          }
        }
      }
      out__.write(omega_ijt);
      std::vector<local_scalar_t__> rho_i =
        std::vector<local_scalar_t__>(rho_i_1dim__, DUMMY_VAR__);
      current_statement__ = 9;
      stan::model::assign(rho_i,
        in__.read<std::vector<local_scalar_t__>>(rho_i_1dim__),
        "assigning variable rho_i");
      out__.write_free_lub(-1, 1, rho_i);
      local_scalar_t__ rho_j = DUMMY_VAR__;
      current_statement__ = 10;
      rho_j = in__.read<local_scalar_t__>();
      out__.write_free_lub(-1, 1, rho_j);
      local_scalar_t__ rho_t = DUMMY_VAR__;
      current_statement__ = 11;
      rho_t = in__.read<local_scalar_t__>();
      out__.write_free_lub(-1, 1, rho_t);
      std::vector<local_scalar_t__> rho_ij =
        std::vector<local_scalar_t__>(rho_ij_1dim__, DUMMY_VAR__);
      current_statement__ = 12;
      stan::model::assign(rho_ij,
        in__.read<std::vector<local_scalar_t__>>(rho_ij_1dim__),
        "assigning variable rho_ij");
      out__.write_free_lub(-1, 1, rho_ij);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nsources, DUMMY_VAR__);
      current_statement__ = 13;
      stan::model::assign(sigma_raw,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(nsources),
        "assigning variable sigma_raw");
      out__.write_free_lub(0, 1, sigma_raw);
      std::vector<local_scalar_t__> sigma_i =
        std::vector<local_scalar_t__>(sigma_i_1dim__, DUMMY_VAR__);
      current_statement__ = 14;
      stan::model::assign(sigma_i,
        in__.read<std::vector<local_scalar_t__>>(sigma_i_1dim__),
        "assigning variable sigma_i");
      out__.write_free_lb(0, sigma_i);
      local_scalar_t__ sigma_j = DUMMY_VAR__;
      current_statement__ = 15;
      sigma_j = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_j);
      local_scalar_t__ sigma_t = DUMMY_VAR__;
      current_statement__ = 16;
      sigma_t = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_t);
      std::vector<local_scalar_t__> sigma_it =
        std::vector<local_scalar_t__>(sigma_it_1dim__, DUMMY_VAR__);
      current_statement__ = 17;
      stan::model::assign(sigma_it,
        in__.read<std::vector<local_scalar_t__>>(sigma_it_1dim__),
        "assigning variable sigma_it");
      out__.write_free_lb(0, sigma_it);
      local_scalar_t__ sigma_jt = DUMMY_VAR__;
      current_statement__ = 18;
      sigma_jt = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_jt);
      std::vector<local_scalar_t__> sigma_ij =
        std::vector<local_scalar_t__>(sigma_ij_1dim__, DUMMY_VAR__);
      current_statement__ = 19;
      stan::model::assign(sigma_ij,
        in__.read<std::vector<local_scalar_t__>>(sigma_ij_1dim__),
        "assigning variable sigma_ij");
      out__.write_free_lb(0, sigma_ij);
      std::vector<local_scalar_t__> sigma_ijt =
        std::vector<local_scalar_t__>(sigma_ijt_1dim__, DUMMY_VAR__);
      current_statement__ = 20;
      stan::model::assign(sigma_ijt,
        in__.read<std::vector<local_scalar_t__>>(sigma_ijt_1dim__),
        "assigning variable sigma_ijt");
      out__.write_free_lb(0, sigma_ijt);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "lambda", "double",
        std::vector<size_t>{static_cast<size_t>(nsources)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "beta_i", "double",
        std::vector<size_t>{static_cast<size_t>(beta_i_1dim__)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "alpha_j",
        "double", std::vector<size_t>{static_cast<size_t>(N_j)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "gamma_t",
        "double", std::vector<size_t>{static_cast<size_t>(N_t)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "phi_it", "double",
        std::vector<size_t>{static_cast<size_t>(phi_it_1dim__),
          static_cast<size_t>(N_t)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "delta_jt",
        "double",
        std::vector<size_t>{static_cast<size_t>(N_j),
          static_cast<size_t>(N_t)});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "psi_ij", "double",
        std::vector<size_t>{static_cast<size_t>(psi_ij_1dim__),
          static_cast<size_t>(N_j)});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "omega_ijt",
        "double",
        std::vector<size_t>{static_cast<size_t>(omega_ijt_1dim__),
          static_cast<size_t>(omega_ijt_2dim__), static_cast<size_t>(N_t)});
      current_statement__ = 9;
      context__.validate_dims("parameter initialization", "rho_i", "double",
        std::vector<size_t>{static_cast<size_t>(rho_i_1dim__)});
      current_statement__ = 10;
      context__.validate_dims("parameter initialization", "rho_j", "double",
        std::vector<size_t>{});
      current_statement__ = 11;
      context__.validate_dims("parameter initialization", "rho_t", "double",
        std::vector<size_t>{});
      current_statement__ = 12;
      context__.validate_dims("parameter initialization", "rho_ij", "double",
        std::vector<size_t>{static_cast<size_t>(rho_ij_1dim__)});
      current_statement__ = 13;
      context__.validate_dims("parameter initialization", "sigma_raw",
        "double", std::vector<size_t>{static_cast<size_t>(nsources)});
      current_statement__ = 14;
      context__.validate_dims("parameter initialization", "sigma_i",
        "double", std::vector<size_t>{static_cast<size_t>(sigma_i_1dim__)});
      current_statement__ = 15;
      context__.validate_dims("parameter initialization", "sigma_j",
        "double", std::vector<size_t>{});
      current_statement__ = 16;
      context__.validate_dims("parameter initialization", "sigma_t",
        "double", std::vector<size_t>{});
      current_statement__ = 17;
      context__.validate_dims("parameter initialization", "sigma_it",
        "double", std::vector<size_t>{static_cast<size_t>(sigma_it_1dim__)});
      current_statement__ = 18;
      context__.validate_dims("parameter initialization", "sigma_jt",
        "double", std::vector<size_t>{});
      current_statement__ = 19;
      context__.validate_dims("parameter initialization", "sigma_ij",
        "double", std::vector<size_t>{static_cast<size_t>(sigma_ij_1dim__)});
      current_statement__ = 20;
      context__.validate_dims("parameter initialization", "sigma_ijt",
        "double", std::vector<size_t>{static_cast<size_t>(sigma_ijt_1dim__)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> lambda =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nsources, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> lambda_flat__;
        current_statement__ = 1;
        lambda_flat__ = context__.vals_r("lambda");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= nsources; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(lambda, lambda_flat__[(pos__ - 1)],
            "assigning variable lambda", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(lambda);
      std::vector<local_scalar_t__> beta_i =
        std::vector<local_scalar_t__>(beta_i_1dim__, DUMMY_VAR__);
      current_statement__ = 2;
      beta_i = context__.vals_r("beta_i");
      out__.write(beta_i);
      std::vector<local_scalar_t__> alpha_j =
        std::vector<local_scalar_t__>(N_j, DUMMY_VAR__);
      current_statement__ = 3;
      alpha_j = context__.vals_r("alpha_j");
      out__.write(alpha_j);
      std::vector<local_scalar_t__> gamma_t =
        std::vector<local_scalar_t__>(N_t, DUMMY_VAR__);
      current_statement__ = 4;
      gamma_t = context__.vals_r("gamma_t");
      out__.write(gamma_t);
      std::vector<std::vector<local_scalar_t__>> phi_it =
        std::vector<std::vector<local_scalar_t__>>(phi_it_1dim__,
          std::vector<local_scalar_t__>(N_t, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> phi_it_flat__;
        current_statement__ = 5;
        phi_it_flat__ = context__.vals_r("phi_it");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= N_t; ++sym1__) {
          current_statement__ = 5;
          for (int sym2__ = 1; sym2__ <= phi_it_1dim__; ++sym2__) {
            current_statement__ = 5;
            stan::model::assign(phi_it, phi_it_flat__[(pos__ - 1)],
              "assigning variable phi_it", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 5;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(phi_it);
      std::vector<std::vector<local_scalar_t__>> delta_jt =
        std::vector<std::vector<local_scalar_t__>>(N_j,
          std::vector<local_scalar_t__>(N_t, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> delta_jt_flat__;
        current_statement__ = 6;
        delta_jt_flat__ = context__.vals_r("delta_jt");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= N_t; ++sym1__) {
          current_statement__ = 6;
          for (int sym2__ = 1; sym2__ <= N_j; ++sym2__) {
            current_statement__ = 6;
            stan::model::assign(delta_jt, delta_jt_flat__[(pos__ - 1)],
              "assigning variable delta_jt", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 6;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(delta_jt);
      std::vector<std::vector<local_scalar_t__>> psi_ij =
        std::vector<std::vector<local_scalar_t__>>(psi_ij_1dim__,
          std::vector<local_scalar_t__>(N_j, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> psi_ij_flat__;
        current_statement__ = 7;
        psi_ij_flat__ = context__.vals_r("psi_ij");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= N_j; ++sym1__) {
          current_statement__ = 7;
          for (int sym2__ = 1; sym2__ <= psi_ij_1dim__; ++sym2__) {
            current_statement__ = 7;
            stan::model::assign(psi_ij, psi_ij_flat__[(pos__ - 1)],
              "assigning variable psi_ij", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 7;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(psi_ij);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> omega_ijt =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(omega_ijt_1dim__,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(omega_ijt_2dim__,
            N_t, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> omega_ijt_flat__;
        current_statement__ = 8;
        omega_ijt_flat__ = context__.vals_r("omega_ijt");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= N_t; ++sym1__) {
          current_statement__ = 8;
          for (int sym2__ = 1; sym2__ <= omega_ijt_2dim__; ++sym2__) {
            current_statement__ = 8;
            for (int sym3__ = 1; sym3__ <= omega_ijt_1dim__; ++sym3__) {
              current_statement__ = 8;
              stan::model::assign(omega_ijt, omega_ijt_flat__[(pos__ - 1)],
                "assigning variable omega_ijt",
                stan::model::index_uni(sym3__),
                stan::model::index_uni(sym2__),
                stan::model::index_uni(sym1__));
              current_statement__ = 8;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      out__.write(omega_ijt);
      std::vector<local_scalar_t__> rho_i =
        std::vector<local_scalar_t__>(rho_i_1dim__, DUMMY_VAR__);
      current_statement__ = 9;
      rho_i = context__.vals_r("rho_i");
      out__.write_free_lub(-1, 1, rho_i);
      local_scalar_t__ rho_j = DUMMY_VAR__;
      current_statement__ = 10;
      rho_j = context__.vals_r("rho_j")[(1 - 1)];
      out__.write_free_lub(-1, 1, rho_j);
      local_scalar_t__ rho_t = DUMMY_VAR__;
      current_statement__ = 11;
      rho_t = context__.vals_r("rho_t")[(1 - 1)];
      out__.write_free_lub(-1, 1, rho_t);
      std::vector<local_scalar_t__> rho_ij =
        std::vector<local_scalar_t__>(rho_ij_1dim__, DUMMY_VAR__);
      current_statement__ = 12;
      rho_ij = context__.vals_r("rho_ij");
      out__.write_free_lub(-1, 1, rho_ij);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nsources, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> sigma_raw_flat__;
        current_statement__ = 13;
        sigma_raw_flat__ = context__.vals_r("sigma_raw");
        current_statement__ = 13;
        pos__ = 1;
        current_statement__ = 13;
        for (int sym1__ = 1; sym1__ <= nsources; ++sym1__) {
          current_statement__ = 13;
          stan::model::assign(sigma_raw, sigma_raw_flat__[(pos__ - 1)],
            "assigning variable sigma_raw", stan::model::index_uni(sym1__));
          current_statement__ = 13;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lub(0, 1, sigma_raw);
      std::vector<local_scalar_t__> sigma_i =
        std::vector<local_scalar_t__>(sigma_i_1dim__, DUMMY_VAR__);
      current_statement__ = 14;
      sigma_i = context__.vals_r("sigma_i");
      out__.write_free_lb(0, sigma_i);
      local_scalar_t__ sigma_j = DUMMY_VAR__;
      current_statement__ = 15;
      sigma_j = context__.vals_r("sigma_j")[(1 - 1)];
      out__.write_free_lb(0, sigma_j);
      local_scalar_t__ sigma_t = DUMMY_VAR__;
      current_statement__ = 16;
      sigma_t = context__.vals_r("sigma_t")[(1 - 1)];
      out__.write_free_lb(0, sigma_t);
      std::vector<local_scalar_t__> sigma_it =
        std::vector<local_scalar_t__>(sigma_it_1dim__, DUMMY_VAR__);
      current_statement__ = 17;
      sigma_it = context__.vals_r("sigma_it");
      out__.write_free_lb(0, sigma_it);
      local_scalar_t__ sigma_jt = DUMMY_VAR__;
      current_statement__ = 18;
      sigma_jt = context__.vals_r("sigma_jt")[(1 - 1)];
      out__.write_free_lb(0, sigma_jt);
      std::vector<local_scalar_t__> sigma_ij =
        std::vector<local_scalar_t__>(sigma_ij_1dim__, DUMMY_VAR__);
      current_statement__ = 19;
      sigma_ij = context__.vals_r("sigma_ij");
      out__.write_free_lb(0, sigma_ij);
      std::vector<local_scalar_t__> sigma_ijt =
        std::vector<local_scalar_t__>(sigma_ijt_1dim__, DUMMY_VAR__);
      current_statement__ = 20;
      sigma_ijt = context__.vals_r("sigma_ijt");
      out__.write_free_lb(0, sigma_ijt);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"lambda", "beta_i", "alpha_j",
                "gamma_t", "phi_it", "delta_jt", "psi_ij", "omega_ijt",
                "rho_i", "rho_j", "rho_t", "rho_ij", "sigma_raw", "sigma_i",
                "sigma_j", "sigma_t", "sigma_it", "sigma_jt", "sigma_ij",
                "sigma_ijt"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"mu", "sigma"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"log_lik"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    nsources)},
                std::vector<size_t>{static_cast<size_t>(beta_i_1dim__)},
                std::vector<size_t>{static_cast<size_t>(N_j)},
                std::vector<size_t>{static_cast<size_t>(N_t)},
                std::vector<size_t>{static_cast<size_t>(phi_it_1dim__),
                  static_cast<size_t>(N_t)},
                std::vector<size_t>{static_cast<size_t>(N_j),
                  static_cast<size_t>(N_t)},
                std::vector<size_t>{static_cast<size_t>(psi_ij_1dim__),
                  static_cast<size_t>(N_j)},
                std::vector<size_t>{static_cast<size_t>(omega_ijt_1dim__),
                  static_cast<size_t>(omega_ijt_2dim__),
                  static_cast<size_t>(N_t)},
                std::vector<size_t>{static_cast<size_t>(rho_i_1dim__)},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(rho_ij_1dim__)},
                std::vector<size_t>{static_cast<size_t>(nsources)},
                std::vector<size_t>{static_cast<size_t>(sigma_i_1dim__)},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(sigma_it_1dim__)},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(sigma_ij_1dim__)},
                std::vector<size_t>{static_cast<size_t>(sigma_ijt_1dim__)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(mu_1dim__)},
             std::vector<size_t>{static_cast<size_t>(nsources)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= nsources; ++sym1__) {
      param_names__.emplace_back(std::string() + "lambda" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= beta_i_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta_i" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N_j; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha_j" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N_t; ++sym1__) {
      param_names__.emplace_back(std::string() + "gamma_t" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N_t; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= phi_it_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "phi_it" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= N_t; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= N_j; ++sym2__) {
        param_names__.emplace_back(std::string() + "delta_jt" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= N_j; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= psi_ij_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "psi_ij" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= N_t; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= omega_ijt_2dim__; ++sym2__) {
        for (int sym3__ = 1; sym3__ <= omega_ijt_1dim__; ++sym3__) {
          param_names__.emplace_back(std::string() + "omega_ijt" + '.' +
            std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
            std::to_string(sym1__));
        }
      }
    }
    for (int sym1__ = 1; sym1__ <= rho_i_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "rho_i" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "rho_j");
    param_names__.emplace_back(std::string() + "rho_t");
    for (int sym1__ = 1; sym1__ <= rho_ij_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "rho_ij" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= nsources; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_raw" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= sigma_i_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_i" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sigma_j");
    param_names__.emplace_back(std::string() + "sigma_t");
    for (int sym1__ = 1; sym1__ <= sigma_it_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_it" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sigma_jt");
    for (int sym1__ = 1; sym1__ <= sigma_ij_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_ij" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= sigma_ijt_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_ijt" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= mu_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nsources; ++sym1__) {
        param_names__.emplace_back(std::string() + "sigma" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= nsources; ++sym1__) {
      param_names__.emplace_back(std::string() + "lambda" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= beta_i_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta_i" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N_j; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha_j" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N_t; ++sym1__) {
      param_names__.emplace_back(std::string() + "gamma_t" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N_t; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= phi_it_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "phi_it" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= N_t; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= N_j; ++sym2__) {
        param_names__.emplace_back(std::string() + "delta_jt" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= N_j; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= psi_ij_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "psi_ij" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= N_t; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= omega_ijt_2dim__; ++sym2__) {
        for (int sym3__ = 1; sym3__ <= omega_ijt_1dim__; ++sym3__) {
          param_names__.emplace_back(std::string() + "omega_ijt" + '.' +
            std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
            std::to_string(sym1__));
        }
      }
    }
    for (int sym1__ = 1; sym1__ <= rho_i_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "rho_i" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "rho_j");
    param_names__.emplace_back(std::string() + "rho_t");
    for (int sym1__ = 1; sym1__ <= rho_ij_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "rho_ij" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= nsources; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_raw" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= sigma_i_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_i" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sigma_j");
    param_names__.emplace_back(std::string() + "sigma_t");
    for (int sym1__ = 1; sym1__ <= sigma_it_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_it" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sigma_jt");
    for (int sym1__ = 1; sym1__ <= sigma_ij_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_ij" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= sigma_ijt_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_ijt" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= mu_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= nsources; ++sym1__) {
        param_names__.emplace_back(std::string() + "sigma" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"lambda\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nsources) + "},\"block\":\"parameters\"},{\"name\":\"beta_i\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(beta_i_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"alpha_j\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_j) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"gamma_t\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_t) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"phi_it\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(phi_it_1dim__) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N_t) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"delta_jt\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_j) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N_t) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"psi_ij\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(psi_ij_1dim__) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N_j) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"omega_ijt\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(omega_ijt_1dim__) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(omega_ijt_2dim__) + ",\"cols\":" + std::to_string(N_t) + "}},\"block\":\"parameters\"},{\"name\":\"rho_i\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(rho_i_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"rho_j\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho_t\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho_ij\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(rho_ij_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sigma_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nsources) + "},\"block\":\"parameters\"},{\"name\":\"sigma_i\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(sigma_i_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sigma_j\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_t\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_it\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(sigma_it_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sigma_jt\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_ij\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(sigma_ij_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sigma_ijt\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(sigma_ijt_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(mu_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nsources) + "},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"lambda\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nsources) + "},\"block\":\"parameters\"},{\"name\":\"beta_i\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(beta_i_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"alpha_j\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_j) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"gamma_t\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_t) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"phi_it\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(phi_it_1dim__) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N_t) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"delta_jt\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_j) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N_t) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"psi_ij\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(psi_ij_1dim__) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N_j) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"omega_ijt\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(omega_ijt_1dim__) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(omega_ijt_2dim__) + ",\"cols\":" + std::to_string(N_t) + "}},\"block\":\"parameters\"},{\"name\":\"rho_i\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(rho_i_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"rho_j\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho_t\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho_ij\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(rho_ij_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sigma_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nsources) + "},\"block\":\"parameters\"},{\"name\":\"sigma_i\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(sigma_i_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sigma_j\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_t\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_it\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(sigma_it_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sigma_jt\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_ij\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(sigma_ij_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sigma_ijt\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(sigma_ijt_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(mu_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nsources) + "},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((((((((((((((nsources + beta_i_1dim__)
      + N_j) + N_t) + (phi_it_1dim__ * N_t)) + (N_j * N_t)) + (psi_ij_1dim__
      * N_j)) + ((omega_ijt_1dim__ * omega_ijt_2dim__) * N_t)) +
      rho_i_1dim__) + 1) + 1) + rho_ij_1dim__) + nsources) + sigma_i_1dim__)
      + 1) + 1) + sigma_it_1dim__) + 1) + sigma_ij_1dim__) +
      sigma_ijt_1dim__);
    const size_t num_transformed = emit_transformed_parameters * ((mu_1dim__
      + nsources));
    const size_t num_gen_quantities = emit_generated_quantities * (N);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((((((((((((((nsources + beta_i_1dim__)
      + N_j) + N_t) + (phi_it_1dim__ * N_t)) + (N_j * N_t)) + (psi_ij_1dim__
      * N_j)) + ((omega_ijt_1dim__ * omega_ijt_2dim__) * N_t)) +
      rho_i_1dim__) + 1) + 1) + rho_ij_1dim__) + nsources) + sigma_i_1dim__)
      + 1) + 1) + sigma_it_1dim__) + 1) + sigma_ij_1dim__) +
      sigma_ijt_1dim__);
    const size_t num_transformed = emit_transformed_parameters * ((mu_1dim__
      + nsources));
    const size_t num_gen_quantities = emit_generated_quantities * (N);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_multi_lik_v2_namespace::model_multi_lik_v2;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_multi_lik_v2_namespace::profiles__;
}
#endif
#endif
