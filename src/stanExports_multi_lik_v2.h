// Generated by rstantools.  Do not edit by hand.

/*
    imcover is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    imcover is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with imcover.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_multi_lik_v2_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_multi_lik_v2");
    reader.add_event(172, 170, "end", "model_multi_lik_v2");
    return reader;
}
#include <stan_meta_header.hpp>
class model_multi_lik_v2
  : public stan::model::model_base_crtp<model_multi_lik_v2> {
private:
        int N;
        int N_i;
        int N_j;
        int N_t;
        std::vector<int> i;
        std::vector<int> j;
        std::vector<int> t;
        vector_d y;
        int nsources;
        std::vector<int> source;
        std::vector<int> sizes;
        vector_d U_sigma;
        vector_d L_sigma;
        std::vector<double> prior_lambda;
        std::vector<double> prior_sigma;
        std::vector<int> mu_lookup;
        std::vector<int> ii;
        std::vector<int> jj;
        std::vector<int> tt;
public:
    model_multi_lik_v2(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_multi_lik_v2(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_multi_lik_v2_namespace::model_multi_lik_v2";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 1);
            current_statement_begin__ = 8;
            context__.validate_dims("data initialization", "N_i", "int", context__.to_vec());
            N_i = int(0);
            vals_i__ = context__.vals_i("N_i");
            pos__ = 0;
            N_i = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_i", N_i, 1);
            current_statement_begin__ = 9;
            context__.validate_dims("data initialization", "N_j", "int", context__.to_vec());
            N_j = int(0);
            vals_i__ = context__.vals_i("N_j");
            pos__ = 0;
            N_j = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_j", N_j, 1);
            current_statement_begin__ = 10;
            context__.validate_dims("data initialization", "N_t", "int", context__.to_vec());
            N_t = int(0);
            vals_i__ = context__.vals_i("N_t");
            pos__ = 0;
            N_t = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_t", N_t, 1);
            current_statement_begin__ = 12;
            validate_non_negative_index("i", "N", N);
            context__.validate_dims("data initialization", "i", "int", context__.to_vec(N));
            i = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("i");
            pos__ = 0;
            size_t i_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < i_k_0_max__; ++k_0__) {
                i[k_0__] = vals_i__[pos__++];
            }
            size_t i_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < i_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "i[i_0__]", i[i_0__], 1);
                check_less_or_equal(function__, "i[i_0__]", i[i_0__], N_i);
            }
            current_statement_begin__ = 13;
            validate_non_negative_index("j", "N", N);
            context__.validate_dims("data initialization", "j", "int", context__.to_vec(N));
            j = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("j");
            pos__ = 0;
            size_t j_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < j_k_0_max__; ++k_0__) {
                j[k_0__] = vals_i__[pos__++];
            }
            size_t j_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < j_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "j[i_0__]", j[i_0__], 1);
                check_less_or_equal(function__, "j[i_0__]", j[i_0__], N_j);
            }
            current_statement_begin__ = 14;
            validate_non_negative_index("t", "N", N);
            context__.validate_dims("data initialization", "t", "int", context__.to_vec(N));
            t = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("t");
            pos__ = 0;
            size_t t_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < t_k_0_max__; ++k_0__) {
                t[k_0__] = vals_i__[pos__++];
            }
            size_t t_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < t_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "t[i_0__]", t[i_0__], 1);
                check_less_or_equal(function__, "t[i_0__]", t[i_0__], N_t);
            }
            current_statement_begin__ = 16;
            validate_non_negative_index("y", "N", N);
            context__.validate_dims("data initialization", "y", "vector_d", context__.to_vec(N));
            y = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < y_j_1_max__; ++j_1__) {
                y(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 18;
            context__.validate_dims("data initialization", "nsources", "int", context__.to_vec());
            nsources = int(0);
            vals_i__ = context__.vals_i("nsources");
            pos__ = 0;
            nsources = vals_i__[pos__++];
            check_greater_or_equal(function__, "nsources", nsources, 1);
            current_statement_begin__ = 19;
            validate_non_negative_index("source", "N", N);
            context__.validate_dims("data initialization", "source", "int", context__.to_vec(N));
            source = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("source");
            pos__ = 0;
            size_t source_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < source_k_0_max__; ++k_0__) {
                source[k_0__] = vals_i__[pos__++];
            }
            size_t source_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < source_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "source[i_0__]", source[i_0__], 1);
                check_less_or_equal(function__, "source[i_0__]", source[i_0__], nsources);
            }
            current_statement_begin__ = 20;
            validate_non_negative_index("sizes", "nsources", nsources);
            context__.validate_dims("data initialization", "sizes", "int", context__.to_vec(nsources));
            sizes = std::vector<int>(nsources, int(0));
            vals_i__ = context__.vals_i("sizes");
            pos__ = 0;
            size_t sizes_k_0_max__ = nsources;
            for (size_t k_0__ = 0; k_0__ < sizes_k_0_max__; ++k_0__) {
                sizes[k_0__] = vals_i__[pos__++];
            }
            size_t sizes_i_0_max__ = nsources;
            for (size_t i_0__ = 0; i_0__ < sizes_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "sizes[i_0__]", sizes[i_0__], 1);
            }
            current_statement_begin__ = 23;
            validate_non_negative_index("U_sigma", "nsources", nsources);
            context__.validate_dims("data initialization", "U_sigma", "vector_d", context__.to_vec(nsources));
            U_sigma = Eigen::Matrix<double, Eigen::Dynamic, 1>(nsources);
            vals_r__ = context__.vals_r("U_sigma");
            pos__ = 0;
            size_t U_sigma_j_1_max__ = nsources;
            for (size_t j_1__ = 0; j_1__ < U_sigma_j_1_max__; ++j_1__) {
                U_sigma(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 25;
            validate_non_negative_index("L_sigma", "nsources", nsources);
            context__.validate_dims("data initialization", "L_sigma", "vector_d", context__.to_vec(nsources));
            L_sigma = Eigen::Matrix<double, Eigen::Dynamic, 1>(nsources);
            vals_r__ = context__.vals_r("L_sigma");
            pos__ = 0;
            size_t L_sigma_j_1_max__ = nsources;
            for (size_t j_1__ = 0; j_1__ < L_sigma_j_1_max__; ++j_1__) {
                L_sigma(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 27;
            validate_non_negative_index("prior_lambda", "nsources", nsources);
            context__.validate_dims("data initialization", "prior_lambda", "double", context__.to_vec(nsources));
            prior_lambda = std::vector<double>(nsources, double(0));
            vals_r__ = context__.vals_r("prior_lambda");
            pos__ = 0;
            size_t prior_lambda_k_0_max__ = nsources;
            for (size_t k_0__ = 0; k_0__ < prior_lambda_k_0_max__; ++k_0__) {
                prior_lambda[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 28;
            validate_non_negative_index("prior_sigma", "nsources", nsources);
            context__.validate_dims("data initialization", "prior_sigma", "double", context__.to_vec(nsources));
            prior_sigma = std::vector<double>(nsources, double(0));
            vals_r__ = context__.vals_r("prior_sigma");
            pos__ = 0;
            size_t prior_sigma_k_0_max__ = nsources;
            for (size_t k_0__ = 0; k_0__ < prior_sigma_k_0_max__; ++k_0__) {
                prior_sigma[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 31;
            validate_non_negative_index("mu_lookup", "N", N);
            context__.validate_dims("data initialization", "mu_lookup", "int", context__.to_vec(N));
            mu_lookup = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("mu_lookup");
            pos__ = 0;
            size_t mu_lookup_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < mu_lookup_k_0_max__; ++k_0__) {
                mu_lookup[k_0__] = vals_i__[pos__++];
            }
            size_t mu_lookup_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < mu_lookup_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "mu_lookup[i_0__]", mu_lookup[i_0__], 1);
                check_less_or_equal(function__, "mu_lookup[i_0__]", mu_lookup[i_0__], ((N_i * N_j) * N_t));
            }
            current_statement_begin__ = 32;
            validate_non_negative_index("ii", "((N_i * N_j) * N_t)", ((N_i * N_j) * N_t));
            context__.validate_dims("data initialization", "ii", "int", context__.to_vec(((N_i * N_j) * N_t)));
            ii = std::vector<int>(((N_i * N_j) * N_t), int(0));
            vals_i__ = context__.vals_i("ii");
            pos__ = 0;
            size_t ii_k_0_max__ = ((N_i * N_j) * N_t);
            for (size_t k_0__ = 0; k_0__ < ii_k_0_max__; ++k_0__) {
                ii[k_0__] = vals_i__[pos__++];
            }
            size_t ii_i_0_max__ = ((N_i * N_j) * N_t);
            for (size_t i_0__ = 0; i_0__ < ii_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "ii[i_0__]", ii[i_0__], 1);
                check_less_or_equal(function__, "ii[i_0__]", ii[i_0__], N_i);
            }
            current_statement_begin__ = 33;
            validate_non_negative_index("jj", "((N_i * N_j) * N_t)", ((N_i * N_j) * N_t));
            context__.validate_dims("data initialization", "jj", "int", context__.to_vec(((N_i * N_j) * N_t)));
            jj = std::vector<int>(((N_i * N_j) * N_t), int(0));
            vals_i__ = context__.vals_i("jj");
            pos__ = 0;
            size_t jj_k_0_max__ = ((N_i * N_j) * N_t);
            for (size_t k_0__ = 0; k_0__ < jj_k_0_max__; ++k_0__) {
                jj[k_0__] = vals_i__[pos__++];
            }
            size_t jj_i_0_max__ = ((N_i * N_j) * N_t);
            for (size_t i_0__ = 0; i_0__ < jj_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "jj[i_0__]", jj[i_0__], 1);
                check_less_or_equal(function__, "jj[i_0__]", jj[i_0__], N_j);
            }
            current_statement_begin__ = 34;
            validate_non_negative_index("tt", "((N_i * N_j) * N_t)", ((N_i * N_j) * N_t));
            context__.validate_dims("data initialization", "tt", "int", context__.to_vec(((N_i * N_j) * N_t)));
            tt = std::vector<int>(((N_i * N_j) * N_t), int(0));
            vals_i__ = context__.vals_i("tt");
            pos__ = 0;
            size_t tt_k_0_max__ = ((N_i * N_j) * N_t);
            for (size_t k_0__ = 0; k_0__ < tt_k_0_max__; ++k_0__) {
                tt[k_0__] = vals_i__[pos__++];
            }
            size_t tt_i_0_max__ = ((N_i * N_j) * N_t);
            for (size_t i_0__ = 0; i_0__ < tt_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "tt[i_0__]", tt[i_0__], 1);
                check_less_or_equal(function__, "tt[i_0__]", tt[i_0__], N_t);
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 41;
            validate_non_negative_index("lambda", "nsources", nsources);
            num_params_r__ += (1 * nsources);
            current_statement_begin__ = 42;
            validate_non_negative_index("beta_i", "(logical_eq(N_i, 1) ? 0 : N_i )", (logical_eq(N_i, 1) ? 0 : N_i ));
            num_params_r__ += (1 * (logical_eq(N_i, 1) ? 0 : N_i ));
            current_statement_begin__ = 43;
            validate_non_negative_index("alpha_j", "N_j", N_j);
            num_params_r__ += (1 * N_j);
            current_statement_begin__ = 44;
            validate_non_negative_index("gamma_t", "N_t", N_t);
            num_params_r__ += (1 * N_t);
            current_statement_begin__ = 47;
            validate_non_negative_index("phi_it", "(logical_eq(N_i, 1) ? 0 : N_i )", (logical_eq(N_i, 1) ? 0 : N_i ));
            validate_non_negative_index("phi_it", "N_t", N_t);
            num_params_r__ += ((1 * (logical_eq(N_i, 1) ? 0 : N_i )) * N_t);
            current_statement_begin__ = 48;
            validate_non_negative_index("delta_jt", "N_j", N_j);
            validate_non_negative_index("delta_jt", "N_t", N_t);
            num_params_r__ += ((1 * N_j) * N_t);
            current_statement_begin__ = 49;
            validate_non_negative_index("psi_ij", "(logical_eq(N_i, 1) ? 0 : N_i )", (logical_eq(N_i, 1) ? 0 : N_i ));
            validate_non_negative_index("psi_ij", "N_j", N_j);
            num_params_r__ += ((1 * (logical_eq(N_i, 1) ? 0 : N_i )) * N_j);
            current_statement_begin__ = 50;
            validate_non_negative_index("omega_ijt", "(logical_eq(N_i, 1) ? 0 : N_j )", (logical_eq(N_i, 1) ? 0 : N_j ));
            validate_non_negative_index("omega_ijt", "N_t", N_t);
            validate_non_negative_index("omega_ijt", "(logical_eq(N_i, 1) ? 0 : N_i )", (logical_eq(N_i, 1) ? 0 : N_i ));
            num_params_r__ += (((logical_eq(N_i, 1) ? 0 : N_j ) * N_t) * (logical_eq(N_i, 1) ? 0 : N_i ));
            current_statement_begin__ = 53;
            validate_non_negative_index("rho_i", "(logical_eq(N_i, 1) ? 0 : 1 )", (logical_eq(N_i, 1) ? 0 : 1 ));
            num_params_r__ += (1 * (logical_eq(N_i, 1) ? 0 : 1 ));
            current_statement_begin__ = 54;
            num_params_r__ += 1;
            current_statement_begin__ = 55;
            num_params_r__ += 1;
            current_statement_begin__ = 56;
            validate_non_negative_index("rho_ij", "(logical_eq(N_i, 1) ? 0 : 1 )", (logical_eq(N_i, 1) ? 0 : 1 ));
            num_params_r__ += (1 * (logical_eq(N_i, 1) ? 0 : 1 ));
            current_statement_begin__ = 59;
            validate_non_negative_index("sigma_raw", "nsources", nsources);
            num_params_r__ += nsources;
            current_statement_begin__ = 61;
            validate_non_negative_index("sigma_i", "(logical_eq(N_i, 1) ? 0 : 1 )", (logical_eq(N_i, 1) ? 0 : 1 ));
            num_params_r__ += (1 * (logical_eq(N_i, 1) ? 0 : 1 ));
            current_statement_begin__ = 62;
            num_params_r__ += 1;
            current_statement_begin__ = 63;
            num_params_r__ += 1;
            current_statement_begin__ = 64;
            validate_non_negative_index("sigma_it", "(logical_eq(N_i, 1) ? 0 : 1 )", (logical_eq(N_i, 1) ? 0 : 1 ));
            num_params_r__ += (1 * (logical_eq(N_i, 1) ? 0 : 1 ));
            current_statement_begin__ = 65;
            num_params_r__ += 1;
            current_statement_begin__ = 66;
            validate_non_negative_index("sigma_ij", "(logical_eq(N_i, 1) ? 0 : 1 )", (logical_eq(N_i, 1) ? 0 : 1 ));
            num_params_r__ += (1 * (logical_eq(N_i, 1) ? 0 : 1 ));
            current_statement_begin__ = 67;
            validate_non_negative_index("sigma_ijt", "(logical_eq(N_i, 1) ? 0 : 1 )", (logical_eq(N_i, 1) ? 0 : 1 ));
            num_params_r__ += (1 * (logical_eq(N_i, 1) ? 0 : 1 ));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_multi_lik_v2() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 41;
        if (!(context__.contains_r("lambda")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lambda missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lambda");
        pos__ = 0U;
        validate_non_negative_index("lambda", "nsources", nsources);
        context__.validate_dims("parameter initialization", "lambda", "double", context__.to_vec(nsources));
        std::vector<double> lambda(nsources, double(0));
        size_t lambda_k_0_max__ = nsources;
        for (size_t k_0__ = 0; k_0__ < lambda_k_0_max__; ++k_0__) {
            lambda[k_0__] = vals_r__[pos__++];
        }
        size_t lambda_i_0_max__ = nsources;
        for (size_t i_0__ = 0; i_0__ < lambda_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(lambda[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lambda: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 42;
        if (!(context__.contains_r("beta_i")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_i missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_i");
        pos__ = 0U;
        validate_non_negative_index("beta_i", "(logical_eq(N_i, 1) ? 0 : N_i )", (logical_eq(N_i, 1) ? 0 : N_i ));
        context__.validate_dims("parameter initialization", "beta_i", "double", context__.to_vec((logical_eq(N_i, 1) ? 0 : N_i )));
        std::vector<double> beta_i((logical_eq(N_i, 1) ? 0 : N_i ), double(0));
        size_t beta_i_k_0_max__ = (logical_eq(N_i, 1) ? 0 : N_i );
        for (size_t k_0__ = 0; k_0__ < beta_i_k_0_max__; ++k_0__) {
            beta_i[k_0__] = vals_r__[pos__++];
        }
        size_t beta_i_i_0_max__ = (logical_eq(N_i, 1) ? 0 : N_i );
        for (size_t i_0__ = 0; i_0__ < beta_i_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(beta_i[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_i: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 43;
        if (!(context__.contains_r("alpha_j")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha_j missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha_j");
        pos__ = 0U;
        validate_non_negative_index("alpha_j", "N_j", N_j);
        context__.validate_dims("parameter initialization", "alpha_j", "double", context__.to_vec(N_j));
        std::vector<double> alpha_j(N_j, double(0));
        size_t alpha_j_k_0_max__ = N_j;
        for (size_t k_0__ = 0; k_0__ < alpha_j_k_0_max__; ++k_0__) {
            alpha_j[k_0__] = vals_r__[pos__++];
        }
        size_t alpha_j_i_0_max__ = N_j;
        for (size_t i_0__ = 0; i_0__ < alpha_j_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(alpha_j[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha_j: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 44;
        if (!(context__.contains_r("gamma_t")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable gamma_t missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("gamma_t");
        pos__ = 0U;
        validate_non_negative_index("gamma_t", "N_t", N_t);
        context__.validate_dims("parameter initialization", "gamma_t", "double", context__.to_vec(N_t));
        std::vector<double> gamma_t(N_t, double(0));
        size_t gamma_t_k_0_max__ = N_t;
        for (size_t k_0__ = 0; k_0__ < gamma_t_k_0_max__; ++k_0__) {
            gamma_t[k_0__] = vals_r__[pos__++];
        }
        size_t gamma_t_i_0_max__ = N_t;
        for (size_t i_0__ = 0; i_0__ < gamma_t_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(gamma_t[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable gamma_t: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 47;
        if (!(context__.contains_r("phi_it")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable phi_it missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("phi_it");
        pos__ = 0U;
        validate_non_negative_index("phi_it", "(logical_eq(N_i, 1) ? 0 : N_i )", (logical_eq(N_i, 1) ? 0 : N_i ));
        validate_non_negative_index("phi_it", "N_t", N_t);
        context__.validate_dims("parameter initialization", "phi_it", "double", context__.to_vec((logical_eq(N_i, 1) ? 0 : N_i ),N_t));
        std::vector<std::vector<double> > phi_it((logical_eq(N_i, 1) ? 0 : N_i ), std::vector<double>(N_t, double(0)));
        size_t phi_it_k_0_max__ = (logical_eq(N_i, 1) ? 0 : N_i );
        size_t phi_it_k_1_max__ = N_t;
        for (size_t k_1__ = 0; k_1__ < phi_it_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < phi_it_k_0_max__; ++k_0__) {
                phi_it[k_0__][k_1__] = vals_r__[pos__++];
            }
        }
        size_t phi_it_i_0_max__ = (logical_eq(N_i, 1) ? 0 : N_i );
        size_t phi_it_i_1_max__ = N_t;
        for (size_t i_0__ = 0; i_0__ < phi_it_i_0_max__; ++i_0__) {
            for (size_t i_1__ = 0; i_1__ < phi_it_i_1_max__; ++i_1__) {
                try {
                    writer__.scalar_unconstrain(phi_it[i_0__][i_1__]);
                } catch (const std::exception& e) {
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable phi_it: ") + e.what()), current_statement_begin__, prog_reader__());
                }
            }
        }
        current_statement_begin__ = 48;
        if (!(context__.contains_r("delta_jt")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable delta_jt missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("delta_jt");
        pos__ = 0U;
        validate_non_negative_index("delta_jt", "N_j", N_j);
        validate_non_negative_index("delta_jt", "N_t", N_t);
        context__.validate_dims("parameter initialization", "delta_jt", "double", context__.to_vec(N_j,N_t));
        std::vector<std::vector<double> > delta_jt(N_j, std::vector<double>(N_t, double(0)));
        size_t delta_jt_k_0_max__ = N_j;
        size_t delta_jt_k_1_max__ = N_t;
        for (size_t k_1__ = 0; k_1__ < delta_jt_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < delta_jt_k_0_max__; ++k_0__) {
                delta_jt[k_0__][k_1__] = vals_r__[pos__++];
            }
        }
        size_t delta_jt_i_0_max__ = N_j;
        size_t delta_jt_i_1_max__ = N_t;
        for (size_t i_0__ = 0; i_0__ < delta_jt_i_0_max__; ++i_0__) {
            for (size_t i_1__ = 0; i_1__ < delta_jt_i_1_max__; ++i_1__) {
                try {
                    writer__.scalar_unconstrain(delta_jt[i_0__][i_1__]);
                } catch (const std::exception& e) {
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable delta_jt: ") + e.what()), current_statement_begin__, prog_reader__());
                }
            }
        }
        current_statement_begin__ = 49;
        if (!(context__.contains_r("psi_ij")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable psi_ij missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("psi_ij");
        pos__ = 0U;
        validate_non_negative_index("psi_ij", "(logical_eq(N_i, 1) ? 0 : N_i )", (logical_eq(N_i, 1) ? 0 : N_i ));
        validate_non_negative_index("psi_ij", "N_j", N_j);
        context__.validate_dims("parameter initialization", "psi_ij", "double", context__.to_vec((logical_eq(N_i, 1) ? 0 : N_i ),N_j));
        std::vector<std::vector<double> > psi_ij((logical_eq(N_i, 1) ? 0 : N_i ), std::vector<double>(N_j, double(0)));
        size_t psi_ij_k_0_max__ = (logical_eq(N_i, 1) ? 0 : N_i );
        size_t psi_ij_k_1_max__ = N_j;
        for (size_t k_1__ = 0; k_1__ < psi_ij_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < psi_ij_k_0_max__; ++k_0__) {
                psi_ij[k_0__][k_1__] = vals_r__[pos__++];
            }
        }
        size_t psi_ij_i_0_max__ = (logical_eq(N_i, 1) ? 0 : N_i );
        size_t psi_ij_i_1_max__ = N_j;
        for (size_t i_0__ = 0; i_0__ < psi_ij_i_0_max__; ++i_0__) {
            for (size_t i_1__ = 0; i_1__ < psi_ij_i_1_max__; ++i_1__) {
                try {
                    writer__.scalar_unconstrain(psi_ij[i_0__][i_1__]);
                } catch (const std::exception& e) {
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable psi_ij: ") + e.what()), current_statement_begin__, prog_reader__());
                }
            }
        }
        current_statement_begin__ = 50;
        if (!(context__.contains_r("omega_ijt")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable omega_ijt missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("omega_ijt");
        pos__ = 0U;
        validate_non_negative_index("omega_ijt", "(logical_eq(N_i, 1) ? 0 : N_j )", (logical_eq(N_i, 1) ? 0 : N_j ));
        validate_non_negative_index("omega_ijt", "N_t", N_t);
        validate_non_negative_index("omega_ijt", "(logical_eq(N_i, 1) ? 0 : N_i )", (logical_eq(N_i, 1) ? 0 : N_i ));
        context__.validate_dims("parameter initialization", "omega_ijt", "matrix_d", context__.to_vec((logical_eq(N_i, 1) ? 0 : N_i ),(logical_eq(N_i, 1) ? 0 : N_j ),N_t));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> > omega_ijt((logical_eq(N_i, 1) ? 0 : N_i ), Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>((logical_eq(N_i, 1) ? 0 : N_j ), N_t));
        size_t omega_ijt_j_2_max__ = N_t;
        size_t omega_ijt_j_1_max__ = (logical_eq(N_i, 1) ? 0 : N_j );
        size_t omega_ijt_k_0_max__ = (logical_eq(N_i, 1) ? 0 : N_i );
        for (size_t j_2__ = 0; j_2__ < omega_ijt_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < omega_ijt_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < omega_ijt_k_0_max__; ++k_0__) {
                    omega_ijt[k_0__](j_1__, j_2__) = vals_r__[pos__++];
                }
            }
        }
        size_t omega_ijt_i_0_max__ = (logical_eq(N_i, 1) ? 0 : N_i );
        for (size_t i_0__ = 0; i_0__ < omega_ijt_i_0_max__; ++i_0__) {
            try {
                writer__.matrix_unconstrain(omega_ijt[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable omega_ijt: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 53;
        if (!(context__.contains_r("rho_i")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable rho_i missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("rho_i");
        pos__ = 0U;
        validate_non_negative_index("rho_i", "(logical_eq(N_i, 1) ? 0 : 1 )", (logical_eq(N_i, 1) ? 0 : 1 ));
        context__.validate_dims("parameter initialization", "rho_i", "double", context__.to_vec((logical_eq(N_i, 1) ? 0 : 1 )));
        std::vector<double> rho_i((logical_eq(N_i, 1) ? 0 : 1 ), double(0));
        size_t rho_i_k_0_max__ = (logical_eq(N_i, 1) ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < rho_i_k_0_max__; ++k_0__) {
            rho_i[k_0__] = vals_r__[pos__++];
        }
        size_t rho_i_i_0_max__ = (logical_eq(N_i, 1) ? 0 : 1 );
        for (size_t i_0__ = 0; i_0__ < rho_i_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lub_unconstrain(-(1), 1, rho_i[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable rho_i: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 54;
        if (!(context__.contains_r("rho_j")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable rho_j missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("rho_j");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "rho_j", "double", context__.to_vec());
        double rho_j(0);
        rho_j = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(-(1), 1, rho_j);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable rho_j: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 55;
        if (!(context__.contains_r("rho_t")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable rho_t missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("rho_t");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "rho_t", "double", context__.to_vec());
        double rho_t(0);
        rho_t = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(-(1), 1, rho_t);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable rho_t: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 56;
        if (!(context__.contains_r("rho_ij")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable rho_ij missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("rho_ij");
        pos__ = 0U;
        validate_non_negative_index("rho_ij", "(logical_eq(N_i, 1) ? 0 : 1 )", (logical_eq(N_i, 1) ? 0 : 1 ));
        context__.validate_dims("parameter initialization", "rho_ij", "double", context__.to_vec((logical_eq(N_i, 1) ? 0 : 1 )));
        std::vector<double> rho_ij((logical_eq(N_i, 1) ? 0 : 1 ), double(0));
        size_t rho_ij_k_0_max__ = (logical_eq(N_i, 1) ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < rho_ij_k_0_max__; ++k_0__) {
            rho_ij[k_0__] = vals_r__[pos__++];
        }
        size_t rho_ij_i_0_max__ = (logical_eq(N_i, 1) ? 0 : 1 );
        for (size_t i_0__ = 0; i_0__ < rho_ij_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lub_unconstrain(-(1), 1, rho_ij[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable rho_ij: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 59;
        if (!(context__.contains_r("sigma_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_raw");
        pos__ = 0U;
        validate_non_negative_index("sigma_raw", "nsources", nsources);
        context__.validate_dims("parameter initialization", "sigma_raw", "vector_d", context__.to_vec(nsources));
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_raw(nsources);
        size_t sigma_raw_j_1_max__ = nsources;
        for (size_t j_1__ = 0; j_1__ < sigma_raw_j_1_max__; ++j_1__) {
            sigma_raw(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lub_unconstrain(0, 1, sigma_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 61;
        if (!(context__.contains_r("sigma_i")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_i missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_i");
        pos__ = 0U;
        validate_non_negative_index("sigma_i", "(logical_eq(N_i, 1) ? 0 : 1 )", (logical_eq(N_i, 1) ? 0 : 1 ));
        context__.validate_dims("parameter initialization", "sigma_i", "double", context__.to_vec((logical_eq(N_i, 1) ? 0 : 1 )));
        std::vector<double> sigma_i((logical_eq(N_i, 1) ? 0 : 1 ), double(0));
        size_t sigma_i_k_0_max__ = (logical_eq(N_i, 1) ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < sigma_i_k_0_max__; ++k_0__) {
            sigma_i[k_0__] = vals_r__[pos__++];
        }
        size_t sigma_i_i_0_max__ = (logical_eq(N_i, 1) ? 0 : 1 );
        for (size_t i_0__ = 0; i_0__ < sigma_i_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, sigma_i[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_i: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 62;
        if (!(context__.contains_r("sigma_j")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_j missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_j");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_j", "double", context__.to_vec());
        double sigma_j(0);
        sigma_j = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_j);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_j: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 63;
        if (!(context__.contains_r("sigma_t")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_t missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_t");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_t", "double", context__.to_vec());
        double sigma_t(0);
        sigma_t = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_t);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_t: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 64;
        if (!(context__.contains_r("sigma_it")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_it missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_it");
        pos__ = 0U;
        validate_non_negative_index("sigma_it", "(logical_eq(N_i, 1) ? 0 : 1 )", (logical_eq(N_i, 1) ? 0 : 1 ));
        context__.validate_dims("parameter initialization", "sigma_it", "double", context__.to_vec((logical_eq(N_i, 1) ? 0 : 1 )));
        std::vector<double> sigma_it((logical_eq(N_i, 1) ? 0 : 1 ), double(0));
        size_t sigma_it_k_0_max__ = (logical_eq(N_i, 1) ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < sigma_it_k_0_max__; ++k_0__) {
            sigma_it[k_0__] = vals_r__[pos__++];
        }
        size_t sigma_it_i_0_max__ = (logical_eq(N_i, 1) ? 0 : 1 );
        for (size_t i_0__ = 0; i_0__ < sigma_it_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, sigma_it[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_it: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 65;
        if (!(context__.contains_r("sigma_jt")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_jt missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_jt");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_jt", "double", context__.to_vec());
        double sigma_jt(0);
        sigma_jt = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_jt);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_jt: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 66;
        if (!(context__.contains_r("sigma_ij")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_ij missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_ij");
        pos__ = 0U;
        validate_non_negative_index("sigma_ij", "(logical_eq(N_i, 1) ? 0 : 1 )", (logical_eq(N_i, 1) ? 0 : 1 ));
        context__.validate_dims("parameter initialization", "sigma_ij", "double", context__.to_vec((logical_eq(N_i, 1) ? 0 : 1 )));
        std::vector<double> sigma_ij((logical_eq(N_i, 1) ? 0 : 1 ), double(0));
        size_t sigma_ij_k_0_max__ = (logical_eq(N_i, 1) ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < sigma_ij_k_0_max__; ++k_0__) {
            sigma_ij[k_0__] = vals_r__[pos__++];
        }
        size_t sigma_ij_i_0_max__ = (logical_eq(N_i, 1) ? 0 : 1 );
        for (size_t i_0__ = 0; i_0__ < sigma_ij_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, sigma_ij[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_ij: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 67;
        if (!(context__.contains_r("sigma_ijt")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_ijt missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_ijt");
        pos__ = 0U;
        validate_non_negative_index("sigma_ijt", "(logical_eq(N_i, 1) ? 0 : 1 )", (logical_eq(N_i, 1) ? 0 : 1 ));
        context__.validate_dims("parameter initialization", "sigma_ijt", "double", context__.to_vec((logical_eq(N_i, 1) ? 0 : 1 )));
        std::vector<double> sigma_ijt((logical_eq(N_i, 1) ? 0 : 1 ), double(0));
        size_t sigma_ijt_k_0_max__ = (logical_eq(N_i, 1) ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < sigma_ijt_k_0_max__; ++k_0__) {
            sigma_ijt[k_0__] = vals_r__[pos__++];
        }
        size_t sigma_ijt_i_0_max__ = (logical_eq(N_i, 1) ? 0 : 1 );
        for (size_t i_0__ = 0; i_0__ < sigma_ijt_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, sigma_ijt[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_ijt: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 41;
            std::vector<local_scalar_t__> lambda;
            size_t lambda_d_0_max__ = nsources;
            lambda.reserve(lambda_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < lambda_d_0_max__; ++d_0__) {
                if (jacobian__)
                    lambda.push_back(in__.scalar_constrain(lp__));
                else
                    lambda.push_back(in__.scalar_constrain());
            }
            current_statement_begin__ = 42;
            std::vector<local_scalar_t__> beta_i;
            size_t beta_i_d_0_max__ = (logical_eq(N_i, 1) ? 0 : N_i );
            beta_i.reserve(beta_i_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < beta_i_d_0_max__; ++d_0__) {
                if (jacobian__)
                    beta_i.push_back(in__.scalar_constrain(lp__));
                else
                    beta_i.push_back(in__.scalar_constrain());
            }
            current_statement_begin__ = 43;
            std::vector<local_scalar_t__> alpha_j;
            size_t alpha_j_d_0_max__ = N_j;
            alpha_j.reserve(alpha_j_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < alpha_j_d_0_max__; ++d_0__) {
                if (jacobian__)
                    alpha_j.push_back(in__.scalar_constrain(lp__));
                else
                    alpha_j.push_back(in__.scalar_constrain());
            }
            current_statement_begin__ = 44;
            std::vector<local_scalar_t__> gamma_t;
            size_t gamma_t_d_0_max__ = N_t;
            gamma_t.reserve(gamma_t_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < gamma_t_d_0_max__; ++d_0__) {
                if (jacobian__)
                    gamma_t.push_back(in__.scalar_constrain(lp__));
                else
                    gamma_t.push_back(in__.scalar_constrain());
            }
            current_statement_begin__ = 47;
            std::vector<std::vector<local_scalar_t__> > phi_it;
            size_t phi_it_d_0_max__ = (logical_eq(N_i, 1) ? 0 : N_i );
            size_t phi_it_d_1_max__ = N_t;
            phi_it.resize(phi_it_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < phi_it_d_0_max__; ++d_0__) {
                phi_it[d_0__].reserve(phi_it_d_1_max__);
                for (size_t d_1__ = 0; d_1__ < phi_it_d_1_max__; ++d_1__) {
                    if (jacobian__)
                        phi_it[d_0__].push_back(in__.scalar_constrain(lp__));
                    else
                        phi_it[d_0__].push_back(in__.scalar_constrain());
                }
            }
            current_statement_begin__ = 48;
            std::vector<std::vector<local_scalar_t__> > delta_jt;
            size_t delta_jt_d_0_max__ = N_j;
            size_t delta_jt_d_1_max__ = N_t;
            delta_jt.resize(delta_jt_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < delta_jt_d_0_max__; ++d_0__) {
                delta_jt[d_0__].reserve(delta_jt_d_1_max__);
                for (size_t d_1__ = 0; d_1__ < delta_jt_d_1_max__; ++d_1__) {
                    if (jacobian__)
                        delta_jt[d_0__].push_back(in__.scalar_constrain(lp__));
                    else
                        delta_jt[d_0__].push_back(in__.scalar_constrain());
                }
            }
            current_statement_begin__ = 49;
            std::vector<std::vector<local_scalar_t__> > psi_ij;
            size_t psi_ij_d_0_max__ = (logical_eq(N_i, 1) ? 0 : N_i );
            size_t psi_ij_d_1_max__ = N_j;
            psi_ij.resize(psi_ij_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < psi_ij_d_0_max__; ++d_0__) {
                psi_ij[d_0__].reserve(psi_ij_d_1_max__);
                for (size_t d_1__ = 0; d_1__ < psi_ij_d_1_max__; ++d_1__) {
                    if (jacobian__)
                        psi_ij[d_0__].push_back(in__.scalar_constrain(lp__));
                    else
                        psi_ij[d_0__].push_back(in__.scalar_constrain());
                }
            }
            current_statement_begin__ = 50;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> > omega_ijt;
            size_t omega_ijt_d_0_max__ = (logical_eq(N_i, 1) ? 0 : N_i );
            omega_ijt.reserve(omega_ijt_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < omega_ijt_d_0_max__; ++d_0__) {
                if (jacobian__)
                    omega_ijt.push_back(in__.matrix_constrain((logical_eq(N_i, 1) ? 0 : N_j ), N_t, lp__));
                else
                    omega_ijt.push_back(in__.matrix_constrain((logical_eq(N_i, 1) ? 0 : N_j ), N_t));
            }
            current_statement_begin__ = 53;
            std::vector<local_scalar_t__> rho_i;
            size_t rho_i_d_0_max__ = (logical_eq(N_i, 1) ? 0 : 1 );
            rho_i.reserve(rho_i_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < rho_i_d_0_max__; ++d_0__) {
                if (jacobian__)
                    rho_i.push_back(in__.scalar_lub_constrain(-(1), 1, lp__));
                else
                    rho_i.push_back(in__.scalar_lub_constrain(-(1), 1));
            }
            current_statement_begin__ = 54;
            local_scalar_t__ rho_j;
            (void) rho_j;  // dummy to suppress unused var warning
            if (jacobian__)
                rho_j = in__.scalar_lub_constrain(-(1), 1, lp__);
            else
                rho_j = in__.scalar_lub_constrain(-(1), 1);
            current_statement_begin__ = 55;
            local_scalar_t__ rho_t;
            (void) rho_t;  // dummy to suppress unused var warning
            if (jacobian__)
                rho_t = in__.scalar_lub_constrain(-(1), 1, lp__);
            else
                rho_t = in__.scalar_lub_constrain(-(1), 1);
            current_statement_begin__ = 56;
            std::vector<local_scalar_t__> rho_ij;
            size_t rho_ij_d_0_max__ = (logical_eq(N_i, 1) ? 0 : 1 );
            rho_ij.reserve(rho_ij_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < rho_ij_d_0_max__; ++d_0__) {
                if (jacobian__)
                    rho_ij.push_back(in__.scalar_lub_constrain(-(1), 1, lp__));
                else
                    rho_ij.push_back(in__.scalar_lub_constrain(-(1), 1));
            }
            current_statement_begin__ = 59;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma_raw;
            (void) sigma_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_raw = in__.vector_lub_constrain(0, 1, nsources, lp__);
            else
                sigma_raw = in__.vector_lub_constrain(0, 1, nsources);
            current_statement_begin__ = 61;
            std::vector<local_scalar_t__> sigma_i;
            size_t sigma_i_d_0_max__ = (logical_eq(N_i, 1) ? 0 : 1 );
            sigma_i.reserve(sigma_i_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < sigma_i_d_0_max__; ++d_0__) {
                if (jacobian__)
                    sigma_i.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    sigma_i.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 62;
            local_scalar_t__ sigma_j;
            (void) sigma_j;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_j = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_j = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 63;
            local_scalar_t__ sigma_t;
            (void) sigma_t;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_t = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_t = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 64;
            std::vector<local_scalar_t__> sigma_it;
            size_t sigma_it_d_0_max__ = (logical_eq(N_i, 1) ? 0 : 1 );
            sigma_it.reserve(sigma_it_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < sigma_it_d_0_max__; ++d_0__) {
                if (jacobian__)
                    sigma_it.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    sigma_it.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 65;
            local_scalar_t__ sigma_jt;
            (void) sigma_jt;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_jt = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_jt = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 66;
            std::vector<local_scalar_t__> sigma_ij;
            size_t sigma_ij_d_0_max__ = (logical_eq(N_i, 1) ? 0 : 1 );
            sigma_ij.reserve(sigma_ij_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < sigma_ij_d_0_max__; ++d_0__) {
                if (jacobian__)
                    sigma_ij.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    sigma_ij.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 67;
            std::vector<local_scalar_t__> sigma_ijt;
            size_t sigma_ijt_d_0_max__ = (logical_eq(N_i, 1) ? 0 : 1 );
            sigma_ijt.reserve(sigma_ijt_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < sigma_ijt_d_0_max__; ++d_0__) {
                if (jacobian__)
                    sigma_ijt.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    sigma_ijt.push_back(in__.scalar_lb_constrain(0));
            }
            // transformed parameters
            current_statement_begin__ = 73;
            validate_non_negative_index("mu", "((N_t * N_j) * N_i)", ((N_t * N_j) * N_i));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu(((N_t * N_j) * N_i));
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu, DUMMY_VAR__);
            current_statement_begin__ = 77;
            validate_non_negative_index("sigma", "nsources", nsources);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma(nsources);
            stan::math::initialize(sigma, DUMMY_VAR__);
            stan::math::fill(sigma, DUMMY_VAR__);
            stan::math::assign(sigma,add(L_sigma, elt_multiply(subtract(U_sigma, L_sigma), sigma_raw)));
            // transformed parameters block statements
            current_statement_begin__ = 80;
            if (as_bool(logical_gt(N_i, 1))) {
                current_statement_begin__ = 81;
                for (int idx = 1; idx <= num_elements(mu); ++idx) {
                    current_statement_begin__ = 82;
                    stan::model::assign(mu, 
                                stan::model::cons_list(stan::model::index_uni(idx), stan::model::nil_index_list()), 
                                ((((((get_base1(beta_i, get_base1(ii, idx, "ii", 1), "beta_i", 1) + get_base1(alpha_j, get_base1(jj, idx, "jj", 1), "alpha_j", 1)) + get_base1(gamma_t, get_base1(tt, idx, "tt", 1), "gamma_t", 1)) + get_base1(get_base1(phi_it, get_base1(ii, idx, "ii", 1), "phi_it", 1), get_base1(tt, idx, "tt", 1), "phi_it", 2)) + get_base1(get_base1(delta_jt, get_base1(jj, idx, "jj", 1), "delta_jt", 1), get_base1(tt, idx, "tt", 1), "delta_jt", 2)) + get_base1(get_base1(psi_ij, get_base1(ii, idx, "ii", 1), "psi_ij", 1), get_base1(jj, idx, "jj", 1), "psi_ij", 2)) + get_base1(get_base1(omega_ijt, get_base1(ii, idx, "ii", 1), "omega_ijt", 1), get_base1(jj, idx, "jj", 1), get_base1(tt, idx, "tt", 1), "omega_ijt", 2)), 
                                "assigning variable mu");
                }
            } else {
                current_statement_begin__ = 85;
                for (int idx = 1; idx <= num_elements(mu); ++idx) {
                    current_statement_begin__ = 86;
                    stan::model::assign(mu, 
                                stan::model::cons_list(stan::model::index_uni(idx), stan::model::nil_index_list()), 
                                ((get_base1(alpha_j, get_base1(jj, idx, "jj", 1), "alpha_j", 1) + get_base1(gamma_t, get_base1(tt, idx, "tt", 1), "gamma_t", 1)) + get_base1(get_base1(delta_jt, get_base1(jj, idx, "jj", 1), "delta_jt", 1), get_base1(tt, idx, "tt", 1), "delta_jt", 2)), 
                                "assigning variable mu");
                }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 73;
            size_t mu_j_1_max__ = ((N_t * N_j) * N_i);
            for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(mu(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: mu" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable mu: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 77;
            size_t sigma_j_1_max__ = nsources;
            for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(sigma(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: sigma" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable sigma: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            current_statement_begin__ = 93;
            lp_accum__.add(normal_log<propto__>(alpha_j, 0, sigma_j));
            current_statement_begin__ = 95;
            for (int s = 1; s <= nsources; ++s) {
                current_statement_begin__ = 96;
                lp_accum__.add(normal_log<propto__>(segment(lambda, s, 1), 0, get_base1(prior_lambda, s, "prior_lambda", 1)));
                current_statement_begin__ = 97;
                lp_accum__.add(cauchy_log<propto__>(segment(sigma_raw, s, 1), 0, get_base1(prior_sigma, s, "prior_sigma", 1)));
            }
            current_statement_begin__ = 102;
            lp_accum__.add(normal_log<propto__>(get_base1(gamma_t, 1, "gamma_t", 1), 0, stan::math::sqrt((pow(sigma_t, 2) / (1 - pow(rho_t, 2))))));
            current_statement_begin__ = 104;
            for (int time = 2; time <= N_t; ++time) {
                current_statement_begin__ = 105;
                lp_accum__.add(normal_log<propto__>(get_base1(gamma_t, time, "gamma_t", 1), (rho_t * get_base1(gamma_t, (time - 1), "gamma_t", 1)), sigma_t));
            }
            current_statement_begin__ = 109;
            for (int vax = 1; vax <= N_j; ++vax) {
                current_statement_begin__ = 110;
                lp_accum__.add(normal_log<propto__>(get_base1(get_base1(delta_jt, vax, "delta_jt", 1), 1, "delta_jt", 2), 0, stan::math::sqrt((pow(sigma_jt, 2) / (1 - pow(rho_j, 2))))));
                current_statement_begin__ = 112;
                for (int time = 2; time <= N_t; ++time) {
                    current_statement_begin__ = 113;
                    lp_accum__.add(normal_log<propto__>(get_base1(get_base1(delta_jt, vax, "delta_jt", 1), time, "delta_jt", 2), (rho_j * get_base1(get_base1(delta_jt, vax, "delta_jt", 1), (time - 1), "delta_jt", 2)), sigma_jt));
                }
            }
            current_statement_begin__ = 118;
            if (as_bool(logical_gt(N_i, 1))) {
                current_statement_begin__ = 119;
                lp_accum__.add(normal_log<propto__>(beta_i, 0, get_base1(sigma_i, 1, "sigma_i", 1)));
                current_statement_begin__ = 122;
                for (int ctry = 1; ctry <= N_i; ++ctry) {
                    current_statement_begin__ = 123;
                    lp_accum__.add(normal_log<propto__>(get_base1(get_base1(phi_it, ctry, "phi_it", 1), 1, "phi_it", 2), 0, stan::math::sqrt((pow(get_base1(sigma_it, 1, "sigma_it", 1), 2) / (1 - pow(get_base1(rho_i, 1, "rho_i", 1), 2))))));
                    current_statement_begin__ = 125;
                    for (int time = 2; time <= N_t; ++time) {
                        current_statement_begin__ = 126;
                        lp_accum__.add(normal_log<propto__>(get_base1(get_base1(phi_it, ctry, "phi_it", 1), time, "phi_it", 2), (get_base1(rho_i, 1, "rho_i", 1) * get_base1(get_base1(phi_it, ctry, "phi_it", 1), (time - 1), "phi_it", 2)), get_base1(sigma_it, 1, "sigma_it", 1)));
                    }
                }
                current_statement_begin__ = 131;
                for (int ctry = 1; ctry <= N_i; ++ctry) {
                    current_statement_begin__ = 132;
                    for (int vax = 1; vax <= N_j; ++vax) {
                        current_statement_begin__ = 133;
                        lp_accum__.add(normal_log<propto__>(get_base1(get_base1(psi_ij, ctry, "psi_ij", 1), vax, "psi_ij", 2), 0, get_base1(sigma_ij, 1, "sigma_ij", 1)));
                    }
                }
                current_statement_begin__ = 138;
                for (int ctry = 1; ctry <= N_i; ++ctry) {
                    current_statement_begin__ = 139;
                    for (int vax = 1; vax <= N_j; ++vax) {
                        current_statement_begin__ = 140;
                        lp_accum__.add(normal_log<propto__>(get_base1(get_base1(omega_ijt, ctry, "omega_ijt", 1), vax, 1, "omega_ijt", 2), 0, stan::math::sqrt((pow(get_base1(sigma_ijt, 1, "sigma_ijt", 1), 2) / (1 - pow(get_base1(rho_ij, 1, "rho_ij", 1), 2))))));
                        current_statement_begin__ = 142;
                        for (int time = 2; time <= N_t; ++time) {
                            current_statement_begin__ = 143;
                            lp_accum__.add(normal_log<propto__>(get_base1(get_base1(omega_ijt, ctry, "omega_ijt", 1), vax, time, "omega_ijt", 2), (get_base1(rho_ij, 1, "rho_ij", 1) * get_base1(get_base1(omega_ijt, ctry, "omega_ijt", 1), vax, (time - 1), "omega_ijt", 2)), get_base1(sigma_ijt, 1, "sigma_ijt", 1)));
                        }
                    }
                }
            }
            {
            current_statement_begin__ = 151;
            int start(0);
            (void) start;  // dummy to suppress unused var warning
            stan::math::fill(start, std::numeric_limits<int>::min());
            stan::math::assign(start,1);
            current_statement_begin__ = 153;
            for (int idx = 1; idx <= nsources; ++idx) {
                {
                current_statement_begin__ = 154;
                int end(0);
                (void) end;  // dummy to suppress unused var warning
                stan::math::fill(end, std::numeric_limits<int>::min());
                stan::math::assign(end,((start + get_base1(sizes, idx, "sizes", 1)) - 1));
                current_statement_begin__ = 155;
                lp_accum__.add(normal_log<propto__>(stan::model::rvalue(y, stan::model::cons_list(stan::model::index_min_max(start, end), stan::model::nil_index_list()), "y"), add(get_base1(lambda, get_base1(source, idx, "source", 1), "lambda", 1), stan::model::rvalue(mu, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(mu_lookup, stan::model::cons_list(stan::model::index_min_max(start, end), stan::model::nil_index_list()), "mu_lookup")), stan::model::nil_index_list()), "mu")), get_base1(sigma, get_base1(source, idx, "source", 1), "sigma", 1)));
                current_statement_begin__ = 157;
                stan::math::assign(start, (end + 1));
                }
            }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("lambda");
        names__.push_back("beta_i");
        names__.push_back("alpha_j");
        names__.push_back("gamma_t");
        names__.push_back("phi_it");
        names__.push_back("delta_jt");
        names__.push_back("psi_ij");
        names__.push_back("omega_ijt");
        names__.push_back("rho_i");
        names__.push_back("rho_j");
        names__.push_back("rho_t");
        names__.push_back("rho_ij");
        names__.push_back("sigma_raw");
        names__.push_back("sigma_i");
        names__.push_back("sigma_j");
        names__.push_back("sigma_t");
        names__.push_back("sigma_it");
        names__.push_back("sigma_jt");
        names__.push_back("sigma_ij");
        names__.push_back("sigma_ijt");
        names__.push_back("mu");
        names__.push_back("sigma");
        names__.push_back("log_lik");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(nsources);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_eq(N_i, 1) ? 0 : N_i ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_j);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_t);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_eq(N_i, 1) ? 0 : N_i ));
        dims__.push_back(N_t);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_j);
        dims__.push_back(N_t);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_eq(N_i, 1) ? 0 : N_i ));
        dims__.push_back(N_j);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_eq(N_i, 1) ? 0 : N_i ));
        dims__.push_back((logical_eq(N_i, 1) ? 0 : N_j ));
        dims__.push_back(N_t);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_eq(N_i, 1) ? 0 : 1 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_eq(N_i, 1) ? 0 : 1 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nsources);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_eq(N_i, 1) ? 0 : 1 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_eq(N_i, 1) ? 0 : 1 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_eq(N_i, 1) ? 0 : 1 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_eq(N_i, 1) ? 0 : 1 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(((N_t * N_j) * N_i));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nsources);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_multi_lik_v2_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<double> lambda;
        size_t lambda_d_0_max__ = nsources;
        lambda.reserve(lambda_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < lambda_d_0_max__; ++d_0__) {
            lambda.push_back(in__.scalar_constrain());
        }
        size_t lambda_k_0_max__ = nsources;
        for (size_t k_0__ = 0; k_0__ < lambda_k_0_max__; ++k_0__) {
            vars__.push_back(lambda[k_0__]);
        }
        std::vector<double> beta_i;
        size_t beta_i_d_0_max__ = (logical_eq(N_i, 1) ? 0 : N_i );
        beta_i.reserve(beta_i_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < beta_i_d_0_max__; ++d_0__) {
            beta_i.push_back(in__.scalar_constrain());
        }
        size_t beta_i_k_0_max__ = (logical_eq(N_i, 1) ? 0 : N_i );
        for (size_t k_0__ = 0; k_0__ < beta_i_k_0_max__; ++k_0__) {
            vars__.push_back(beta_i[k_0__]);
        }
        std::vector<double> alpha_j;
        size_t alpha_j_d_0_max__ = N_j;
        alpha_j.reserve(alpha_j_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < alpha_j_d_0_max__; ++d_0__) {
            alpha_j.push_back(in__.scalar_constrain());
        }
        size_t alpha_j_k_0_max__ = N_j;
        for (size_t k_0__ = 0; k_0__ < alpha_j_k_0_max__; ++k_0__) {
            vars__.push_back(alpha_j[k_0__]);
        }
        std::vector<double> gamma_t;
        size_t gamma_t_d_0_max__ = N_t;
        gamma_t.reserve(gamma_t_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < gamma_t_d_0_max__; ++d_0__) {
            gamma_t.push_back(in__.scalar_constrain());
        }
        size_t gamma_t_k_0_max__ = N_t;
        for (size_t k_0__ = 0; k_0__ < gamma_t_k_0_max__; ++k_0__) {
            vars__.push_back(gamma_t[k_0__]);
        }
        std::vector<std::vector<double> > phi_it;
        size_t phi_it_d_0_max__ = (logical_eq(N_i, 1) ? 0 : N_i );
        size_t phi_it_d_1_max__ = N_t;
        phi_it.resize(phi_it_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < phi_it_d_0_max__; ++d_0__) {
            phi_it[d_0__].reserve(phi_it_d_1_max__);
            for (size_t d_1__ = 0; d_1__ < phi_it_d_1_max__; ++d_1__) {
                phi_it[d_0__].push_back(in__.scalar_constrain());
            }
        }
        size_t phi_it_k_0_max__ = (logical_eq(N_i, 1) ? 0 : N_i );
        size_t phi_it_k_1_max__ = N_t;
        for (size_t k_1__ = 0; k_1__ < phi_it_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < phi_it_k_0_max__; ++k_0__) {
                vars__.push_back(phi_it[k_0__][k_1__]);
            }
        }
        std::vector<std::vector<double> > delta_jt;
        size_t delta_jt_d_0_max__ = N_j;
        size_t delta_jt_d_1_max__ = N_t;
        delta_jt.resize(delta_jt_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < delta_jt_d_0_max__; ++d_0__) {
            delta_jt[d_0__].reserve(delta_jt_d_1_max__);
            for (size_t d_1__ = 0; d_1__ < delta_jt_d_1_max__; ++d_1__) {
                delta_jt[d_0__].push_back(in__.scalar_constrain());
            }
        }
        size_t delta_jt_k_0_max__ = N_j;
        size_t delta_jt_k_1_max__ = N_t;
        for (size_t k_1__ = 0; k_1__ < delta_jt_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < delta_jt_k_0_max__; ++k_0__) {
                vars__.push_back(delta_jt[k_0__][k_1__]);
            }
        }
        std::vector<std::vector<double> > psi_ij;
        size_t psi_ij_d_0_max__ = (logical_eq(N_i, 1) ? 0 : N_i );
        size_t psi_ij_d_1_max__ = N_j;
        psi_ij.resize(psi_ij_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < psi_ij_d_0_max__; ++d_0__) {
            psi_ij[d_0__].reserve(psi_ij_d_1_max__);
            for (size_t d_1__ = 0; d_1__ < psi_ij_d_1_max__; ++d_1__) {
                psi_ij[d_0__].push_back(in__.scalar_constrain());
            }
        }
        size_t psi_ij_k_0_max__ = (logical_eq(N_i, 1) ? 0 : N_i );
        size_t psi_ij_k_1_max__ = N_j;
        for (size_t k_1__ = 0; k_1__ < psi_ij_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < psi_ij_k_0_max__; ++k_0__) {
                vars__.push_back(psi_ij[k_0__][k_1__]);
            }
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> > omega_ijt;
        size_t omega_ijt_d_0_max__ = (logical_eq(N_i, 1) ? 0 : N_i );
        omega_ijt.reserve(omega_ijt_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < omega_ijt_d_0_max__; ++d_0__) {
            omega_ijt.push_back(in__.matrix_constrain((logical_eq(N_i, 1) ? 0 : N_j ), N_t));
        }
        size_t omega_ijt_j_2_max__ = N_t;
        size_t omega_ijt_j_1_max__ = (logical_eq(N_i, 1) ? 0 : N_j );
        size_t omega_ijt_k_0_max__ = (logical_eq(N_i, 1) ? 0 : N_i );
        for (size_t j_2__ = 0; j_2__ < omega_ijt_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < omega_ijt_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < omega_ijt_k_0_max__; ++k_0__) {
                    vars__.push_back(omega_ijt[k_0__](j_1__, j_2__));
                }
            }
        }
        std::vector<double> rho_i;
        size_t rho_i_d_0_max__ = (logical_eq(N_i, 1) ? 0 : 1 );
        rho_i.reserve(rho_i_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < rho_i_d_0_max__; ++d_0__) {
            rho_i.push_back(in__.scalar_lub_constrain(-(1), 1));
        }
        size_t rho_i_k_0_max__ = (logical_eq(N_i, 1) ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < rho_i_k_0_max__; ++k_0__) {
            vars__.push_back(rho_i[k_0__]);
        }
        double rho_j = in__.scalar_lub_constrain(-(1), 1);
        vars__.push_back(rho_j);
        double rho_t = in__.scalar_lub_constrain(-(1), 1);
        vars__.push_back(rho_t);
        std::vector<double> rho_ij;
        size_t rho_ij_d_0_max__ = (logical_eq(N_i, 1) ? 0 : 1 );
        rho_ij.reserve(rho_ij_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < rho_ij_d_0_max__; ++d_0__) {
            rho_ij.push_back(in__.scalar_lub_constrain(-(1), 1));
        }
        size_t rho_ij_k_0_max__ = (logical_eq(N_i, 1) ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < rho_ij_k_0_max__; ++k_0__) {
            vars__.push_back(rho_ij[k_0__]);
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_raw = in__.vector_lub_constrain(0, 1, nsources);
        size_t sigma_raw_j_1_max__ = nsources;
        for (size_t j_1__ = 0; j_1__ < sigma_raw_j_1_max__; ++j_1__) {
            vars__.push_back(sigma_raw(j_1__));
        }
        std::vector<double> sigma_i;
        size_t sigma_i_d_0_max__ = (logical_eq(N_i, 1) ? 0 : 1 );
        sigma_i.reserve(sigma_i_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < sigma_i_d_0_max__; ++d_0__) {
            sigma_i.push_back(in__.scalar_lb_constrain(0));
        }
        size_t sigma_i_k_0_max__ = (logical_eq(N_i, 1) ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < sigma_i_k_0_max__; ++k_0__) {
            vars__.push_back(sigma_i[k_0__]);
        }
        double sigma_j = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_j);
        double sigma_t = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_t);
        std::vector<double> sigma_it;
        size_t sigma_it_d_0_max__ = (logical_eq(N_i, 1) ? 0 : 1 );
        sigma_it.reserve(sigma_it_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < sigma_it_d_0_max__; ++d_0__) {
            sigma_it.push_back(in__.scalar_lb_constrain(0));
        }
        size_t sigma_it_k_0_max__ = (logical_eq(N_i, 1) ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < sigma_it_k_0_max__; ++k_0__) {
            vars__.push_back(sigma_it[k_0__]);
        }
        double sigma_jt = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_jt);
        std::vector<double> sigma_ij;
        size_t sigma_ij_d_0_max__ = (logical_eq(N_i, 1) ? 0 : 1 );
        sigma_ij.reserve(sigma_ij_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < sigma_ij_d_0_max__; ++d_0__) {
            sigma_ij.push_back(in__.scalar_lb_constrain(0));
        }
        size_t sigma_ij_k_0_max__ = (logical_eq(N_i, 1) ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < sigma_ij_k_0_max__; ++k_0__) {
            vars__.push_back(sigma_ij[k_0__]);
        }
        std::vector<double> sigma_ijt;
        size_t sigma_ijt_d_0_max__ = (logical_eq(N_i, 1) ? 0 : 1 );
        sigma_ijt.reserve(sigma_ijt_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < sigma_ijt_d_0_max__; ++d_0__) {
            sigma_ijt.push_back(in__.scalar_lb_constrain(0));
        }
        size_t sigma_ijt_k_0_max__ = (logical_eq(N_i, 1) ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < sigma_ijt_k_0_max__; ++k_0__) {
            vars__.push_back(sigma_ijt[k_0__]);
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 73;
            validate_non_negative_index("mu", "((N_t * N_j) * N_i)", ((N_t * N_j) * N_i));
            Eigen::Matrix<double, Eigen::Dynamic, 1> mu(((N_t * N_j) * N_i));
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu, DUMMY_VAR__);
            current_statement_begin__ = 77;
            validate_non_negative_index("sigma", "nsources", nsources);
            Eigen::Matrix<double, Eigen::Dynamic, 1> sigma(nsources);
            stan::math::initialize(sigma, DUMMY_VAR__);
            stan::math::fill(sigma, DUMMY_VAR__);
            stan::math::assign(sigma,add(L_sigma, elt_multiply(subtract(U_sigma, L_sigma), sigma_raw)));
            // do transformed parameters statements
            current_statement_begin__ = 80;
            if (as_bool(logical_gt(N_i, 1))) {
                current_statement_begin__ = 81;
                for (int idx = 1; idx <= num_elements(mu); ++idx) {
                    current_statement_begin__ = 82;
                    stan::model::assign(mu, 
                                stan::model::cons_list(stan::model::index_uni(idx), stan::model::nil_index_list()), 
                                ((((((get_base1(beta_i, get_base1(ii, idx, "ii", 1), "beta_i", 1) + get_base1(alpha_j, get_base1(jj, idx, "jj", 1), "alpha_j", 1)) + get_base1(gamma_t, get_base1(tt, idx, "tt", 1), "gamma_t", 1)) + get_base1(get_base1(phi_it, get_base1(ii, idx, "ii", 1), "phi_it", 1), get_base1(tt, idx, "tt", 1), "phi_it", 2)) + get_base1(get_base1(delta_jt, get_base1(jj, idx, "jj", 1), "delta_jt", 1), get_base1(tt, idx, "tt", 1), "delta_jt", 2)) + get_base1(get_base1(psi_ij, get_base1(ii, idx, "ii", 1), "psi_ij", 1), get_base1(jj, idx, "jj", 1), "psi_ij", 2)) + get_base1(get_base1(omega_ijt, get_base1(ii, idx, "ii", 1), "omega_ijt", 1), get_base1(jj, idx, "jj", 1), get_base1(tt, idx, "tt", 1), "omega_ijt", 2)), 
                                "assigning variable mu");
                }
            } else {
                current_statement_begin__ = 85;
                for (int idx = 1; idx <= num_elements(mu); ++idx) {
                    current_statement_begin__ = 86;
                    stan::model::assign(mu, 
                                stan::model::cons_list(stan::model::index_uni(idx), stan::model::nil_index_list()), 
                                ((get_base1(alpha_j, get_base1(jj, idx, "jj", 1), "alpha_j", 1) + get_base1(gamma_t, get_base1(tt, idx, "tt", 1), "gamma_t", 1)) + get_base1(get_base1(delta_jt, get_base1(jj, idx, "jj", 1), "delta_jt", 1), get_base1(tt, idx, "tt", 1), "delta_jt", 2)), 
                                "assigning variable mu");
                }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t mu_j_1_max__ = ((N_t * N_j) * N_i);
                for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                    vars__.push_back(mu(j_1__));
                }
                size_t sigma_j_1_max__ = nsources;
                for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
                    vars__.push_back(sigma(j_1__));
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 165;
            validate_non_negative_index("log_lik", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_lik(N);
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 167;
            for (int idx = 1; idx <= N; ++idx) {
                current_statement_begin__ = 168;
                stan::model::assign(log_lik, 
                            stan::model::cons_list(stan::model::index_uni(idx), stan::model::nil_index_list()), 
                            normal_log(get_base1(y, idx, "y", 1), (get_base1(lambda, get_base1(source, idx, "source", 1), "lambda", 1) + get_base1(mu, get_base1(mu_lookup, idx, "mu_lookup", 1), "mu", 1)), get_base1(sigma, get_base1(source, idx, "source", 1), "sigma", 1)), 
                            "assigning variable log_lik");
            }
            // validate, write generated quantities
            current_statement_begin__ = 165;
            size_t log_lik_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                vars__.push_back(log_lik(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_multi_lik_v2";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t lambda_k_0_max__ = nsources;
        for (size_t k_0__ = 0; k_0__ < lambda_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_i_k_0_max__ = (logical_eq(N_i, 1) ? 0 : N_i );
        for (size_t k_0__ = 0; k_0__ < beta_i_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_i" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_j_k_0_max__ = N_j;
        for (size_t k_0__ = 0; k_0__ < alpha_j_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_j" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gamma_t_k_0_max__ = N_t;
        for (size_t k_0__ = 0; k_0__ < gamma_t_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma_t" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t phi_it_k_0_max__ = (logical_eq(N_i, 1) ? 0 : N_i );
        size_t phi_it_k_1_max__ = N_t;
        for (size_t k_1__ = 0; k_1__ < phi_it_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < phi_it_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "phi_it" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t delta_jt_k_0_max__ = N_j;
        size_t delta_jt_k_1_max__ = N_t;
        for (size_t k_1__ = 0; k_1__ < delta_jt_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < delta_jt_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "delta_jt" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t psi_ij_k_0_max__ = (logical_eq(N_i, 1) ? 0 : N_i );
        size_t psi_ij_k_1_max__ = N_j;
        for (size_t k_1__ = 0; k_1__ < psi_ij_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < psi_ij_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi_ij" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t omega_ijt_j_2_max__ = N_t;
        size_t omega_ijt_j_1_max__ = (logical_eq(N_i, 1) ? 0 : N_j );
        size_t omega_ijt_k_0_max__ = (logical_eq(N_i, 1) ? 0 : N_i );
        for (size_t j_2__ = 0; j_2__ < omega_ijt_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < omega_ijt_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < omega_ijt_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "omega_ijt" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        size_t rho_i_k_0_max__ = (logical_eq(N_i, 1) ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < rho_i_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho_i" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "rho_j";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rho_t";
        param_names__.push_back(param_name_stream__.str());
        size_t rho_ij_k_0_max__ = (logical_eq(N_i, 1) ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < rho_ij_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho_ij" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_raw_j_1_max__ = nsources;
        for (size_t j_1__ = 0; j_1__ < sigma_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_i_k_0_max__ = (logical_eq(N_i, 1) ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < sigma_i_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_i" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_j";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_t";
        param_names__.push_back(param_name_stream__.str());
        size_t sigma_it_k_0_max__ = (logical_eq(N_i, 1) ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < sigma_it_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_it" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_jt";
        param_names__.push_back(param_name_stream__.str());
        size_t sigma_ij_k_0_max__ = (logical_eq(N_i, 1) ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < sigma_ij_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_ij" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_ijt_k_0_max__ = (logical_eq(N_i, 1) ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < sigma_ijt_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_ijt" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t mu_j_1_max__ = ((N_t * N_j) * N_i);
            for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t sigma_j_1_max__ = nsources;
            for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sigma" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t log_lik_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t lambda_k_0_max__ = nsources;
        for (size_t k_0__ = 0; k_0__ < lambda_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_i_k_0_max__ = (logical_eq(N_i, 1) ? 0 : N_i );
        for (size_t k_0__ = 0; k_0__ < beta_i_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_i" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_j_k_0_max__ = N_j;
        for (size_t k_0__ = 0; k_0__ < alpha_j_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_j" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gamma_t_k_0_max__ = N_t;
        for (size_t k_0__ = 0; k_0__ < gamma_t_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma_t" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t phi_it_k_0_max__ = (logical_eq(N_i, 1) ? 0 : N_i );
        size_t phi_it_k_1_max__ = N_t;
        for (size_t k_1__ = 0; k_1__ < phi_it_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < phi_it_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "phi_it" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t delta_jt_k_0_max__ = N_j;
        size_t delta_jt_k_1_max__ = N_t;
        for (size_t k_1__ = 0; k_1__ < delta_jt_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < delta_jt_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "delta_jt" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t psi_ij_k_0_max__ = (logical_eq(N_i, 1) ? 0 : N_i );
        size_t psi_ij_k_1_max__ = N_j;
        for (size_t k_1__ = 0; k_1__ < psi_ij_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < psi_ij_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi_ij" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t omega_ijt_j_2_max__ = N_t;
        size_t omega_ijt_j_1_max__ = (logical_eq(N_i, 1) ? 0 : N_j );
        size_t omega_ijt_k_0_max__ = (logical_eq(N_i, 1) ? 0 : N_i );
        for (size_t j_2__ = 0; j_2__ < omega_ijt_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < omega_ijt_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < omega_ijt_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "omega_ijt" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        size_t rho_i_k_0_max__ = (logical_eq(N_i, 1) ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < rho_i_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho_i" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "rho_j";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rho_t";
        param_names__.push_back(param_name_stream__.str());
        size_t rho_ij_k_0_max__ = (logical_eq(N_i, 1) ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < rho_ij_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho_ij" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_raw_j_1_max__ = nsources;
        for (size_t j_1__ = 0; j_1__ < sigma_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_i_k_0_max__ = (logical_eq(N_i, 1) ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < sigma_i_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_i" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_j";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_t";
        param_names__.push_back(param_name_stream__.str());
        size_t sigma_it_k_0_max__ = (logical_eq(N_i, 1) ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < sigma_it_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_it" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_jt";
        param_names__.push_back(param_name_stream__.str());
        size_t sigma_ij_k_0_max__ = (logical_eq(N_i, 1) ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < sigma_ij_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_ij" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_ijt_k_0_max__ = (logical_eq(N_i, 1) ? 0 : 1 );
        for (size_t k_0__ = 0; k_0__ < sigma_ijt_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_ijt" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t mu_j_1_max__ = ((N_t * N_j) * N_i);
            for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t sigma_j_1_max__ = nsources;
            for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sigma" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t log_lik_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_multi_lik_v2_namespace::model_multi_lik_v2 stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
